{"version":3,"sources":["webpack://WeaponPlugin/webpack/universalModuleDefinition","webpack://WeaponPlugin/./main.ts","webpack://WeaponPlugin/./Weapon.ts","webpack://WeaponPlugin/./Bullet.ts","webpack://WeaponPlugin/./consts.ts","webpack://WeaponPlugin/./events.ts","webpack://WeaponPlugin/./validateConfig.ts","webpack://WeaponPlugin/./WeaponPlugin.ts","webpack://WeaponPlugin/webpack/bootstrap","webpack://WeaponPlugin/webpack/runtime/define property getters","webpack://WeaponPlugin/webpack/runtime/hasOwnProperty shorthand","webpack://WeaponPlugin/webpack/runtime/make namespace object","webpack://WeaponPlugin/webpack/startup"],"names":["Weapon","Phaser","Events","EventEmitter","constructor","scene","bulletLimit","key","frame","group","debugPhysics","_bullets","_autoExpandBulletsGroup","_autofire","_shots","_fireLimit","_fireRate","_fireRateVariance","_fireFrom","Geom","Rectangle","_fireAngle","Angle","_bulletInheritSpriteSpeed","_bulletAnimation","_bulletFrameRandom","_bulletFrameCycle","_bulletWorldWrap","_bulletWorldWrapPadding","_bulletAngleOffset","_bulletAngleVariance","_bulletSpeed","_bulletSpeedVariance","_bulletLifespan","_bulletKillDistance","_bulletGravity","Math","Vector2","_bulletRotateToVelocity","_bulletKey","_bulletFrame","_bulletClass","Bullet","_bulletCollideWorldBounds","_bulletKillType","KillType","_data","customBody","width","height","offsetX","offsetY","_bounds","_bulletBounds","_bulletFrames","_bulletFrameIndex","anims","_trackedSprite","_trackedPointer","_multiFire","_hasFired","_trackRotation","_trackOffset","_nextFire","_tempNextFire","_rotatedPoint","logLevel","physics","world","bounds","validateConfig","createBullets","bullets","value","autoExpandBulletsGroup","autofire","shots","fireLimit","fireRate","fireRateVariance","fireFrom","fireAngle","bulletInheritSpriteSpeed","bulletAnimation","bulletFrameRandom","bulletFrameCycle","bulletWorldWrap","bulletWorldWrapPadding","bulletAngleOffset","bulletAngleVariance","bulletSpeed","bulletSpeedVariance","bulletLifespan","bulletKillDistance","bulletGravity","bulletRotateToVelocity","bulletKey","bulletFrame","bulletClass","classType","bulletCollideWorldBounds","children","each","child","body","collideWorldBounds","setData","bulletKillType","type","bulletBounds","sys","cameras","main","getBounds","bulletFrames","bulletFrameIndex","trackedSprite","trackedPointer","multiFire","trackRotation","trackOffset","x","y","quantity","add","maxSize","runChildUpdate","createMultiple","repeat","active","visible","addMultiple","entries","forEach","callback","callbackContext","args","call","pauseAll","enable","timeEvent","getData","undefined","paused","resumeAll","killAll","kill","resetShots","newLimit","trackSprite","sprite","set","trackPointer","pointer","input","activePointer","fireMany","positions","from","offset","bullet","fire","push","position","fireOffset","fireAtPointer","fireAtSprite","fireAtXY","time","now","speed","Between","updateFireFrom","rotation","RotateAround","fromX","random","fromY","angle","RadToDeg","atan2","moveX","moveY","cos","DegToRad","sin","getFirstDead","prepare","killType","killDistance","rotateToVelocity","addEvent","delay","callbackScope","lifespan","play","length","setTexture","nextFrame","floor","setSize","setOffset","setVelocity","setGravity","next","rate","emit","WEAPON_FIRE","WEAPON_FIRE_LIMIT","CenterOn","setBulletBodyOffset","setBulletFrames","min","max","selectionMethod","FrameType","log","Utils","Array","NumberArray","addBulletAnimation","name","frames","frameRate","exists","create","get","update","postRender","destroy","bulletID","GameObjects","Sprite","existing","setDataEnabled","bulletManager","bodyDirty","bodyBounds","data","setActive","setVisible","reset","debugShowBody","debugShowVelocity","stop","BULLET_KILL","distance","Intersects","RectangleToRectangle","velocity","wrap","text","console","warn","Error","weapon","property","includes","consts","shouldBePositive","WeaponPlugin","Plugins","ScenePlugin","pluginManager","weapons","registerGameObject","bind","config","weaponClass","start","systems","events","on","Core","POST_RENDER","boot","eventEmitter","Scenes","UPDATE","DESTROY"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAN,SAAqBC,MAAM,CAACC,MAAP,CAAcC,YAAnC,CAAgD;AAC9C;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAeE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAKE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,aAAW,CACTC,KADS,EAETC,WAFS,EAGTC,GAAG,GAAG,EAHG,EAITC,KAAK,GAAG,EAJC,E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","file":"WeaponPlugin.modern.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WeaponPlugin\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WeaponPlugin\"] = factory();\n\telse\n\t\troot[\"WeaponPlugin\"] = factory();\n})(globalThis, function() {\nreturn ","// Set up shortcuts to the classes and constants\nexport { default as Weapon } from './Weapon';\nexport { default as Bullet } from './Bullet';\nexport { default as consts } from './consts';\nexport { default as events } from './events';\nexport { default as WeaponPlugin } from './WeaponPlugin';\n","import Bullet from './Bullet';\nimport { KillType, Angle, FrameType } from './consts';\nimport validateConfig, { log } from './validateConfig';\nimport { WEAPON_FIRE, WEAPON_FIRE_LIMIT } from './events';\n\n/**\n * Any Object, as long as it has public `x` and `y` properties,\n * such as {@link https://photonstorm.github.io/phaser3-docs/Phaser.Geom.Point.html Point}, `{ x: 0, y: 0 }`, {@link https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Sprite.html Sprite}, etc\n */\ntype ObjectWithXY = {\n  x: number;\n  y: number;\n};\n\n/**\n * An object that has x/y coords and optional rotation. Any Sprite-like object.\n */\ntype ObjectWithTransform = ObjectWithXY & {\n  rotation?: number;\n  angle?: number;\n  body?: Phaser.Physics.Arcade.Body;\n};\n\n/**\n * The Weapon provides the ability to easily create a bullet pool and manager.\n *\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\n * not currently work with Impact or Matter Physics.\n *\n * The Bullets are created inside of {@link bullets weapon.bullets}, which is\n * a {@link https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Group.html Group} instance. Anything you can usually do\n * with a Group, like iterate it, etc can be done to the bullets Group too.\n *\n * Bullets can have textures and even animations. You can control the speed at\n * which they are fired, the firing rate, the firing angle, and even set things\n * like gravity for them.\n *\n * A small example, using add.weapon, assumed to be running from within a\n * {@link https://photonstorm.github.io/phaser3-docs/Phaser.Types.Scenes.html#.SceneCreateCallback Phaser.Scene.create} method:\n *\n * ```javascript\n * var weapon = this.add.weapon(10, 'bullet');\n * weapon.fireFrom.setPosition(300, 300);\n * this.input.on(Phaser.Input.Events.POINTER_DOWN, weapon.fire, this);\n * ```\n */\nclass Weapon extends Phaser.Events.EventEmitter {\n  /**\n   * The scene the Weapon is bound to\n   */\n  scene: Phaser.Scene;\n\n  /**\n   * Should debug graphics render for physics bodies?\n   */\n  debugPhysics = false;\n\n  /**\n   * Private var that holds the public {@link bullets} property.\n   */\n  private _bullets!: Phaser.GameObjects.Group;\n\n  /**\n   * Private var that holds the public {@link autoExpandBulletsGroup} property.\n   */\n  private _autoExpandBulletsGroup = false;\n\n  /**\n   * Private var that holds the public {@link autofire} property.\n   */\n  private _autofire = false;\n\n  /**\n   * Private var that holds the public {@link shots} property.\n   */\n  private _shots = 0;\n\n  /**\n   * Private var that holds the public {@link fireLimit} property.\n   */\n  private _fireLimit = 0;\n\n  /**\n   * Private var that holds the public {@link fireRate} property.\n   */\n  private _fireRate = 100;\n\n  /**\n   * Private var that holds the public {@link fireRateVariance} property.\n   */\n  private _fireRateVariance = 0;\n\n  /**\n   * Private var that holds the public {@link fireFrom} property.\n   */\n  private _fireFrom = new Phaser.Geom.Rectangle(0, 0, 1, 1);\n\n  /**\n   * Private var that holds the public {@link fireAngle} property.\n   */\n  private _fireAngle: integer = Angle.ANGLE_UP;\n\n  /**\n   * Private var that holds the public {@link bulletInheritSpriteSpeed} property.\n   */\n  private _bulletInheritSpriteSpeed = false;\n\n  /**\n   * Private var that holds the public {@link bulletAnimation} property.\n   */\n  private _bulletAnimation = '';\n\n  /**\n   * Private var that holds the public {@link bulletFrameRandom} property.\n   */\n  private _bulletFrameRandom = false;\n\n  /**\n   * Private var that holds the public {@link bulletFrameCycle} property.\n   */\n  private _bulletFrameCycle = false;\n\n  /**\n   * Private var that holds the public {@link bulletWorldWrap} property.\n   */\n  private _bulletWorldWrap = false;\n\n  /**\n   * Private var that holds the public {@link bulletWorldWrapPadding} property.\n   */\n  private _bulletWorldWrapPadding: integer = 0;\n\n  /**\n   * Private var that holds the public {@link bulletAngleOffset} property.\n   */\n  private _bulletAngleOffset = 0;\n\n  /**\n   * Private var that holds the public {@link bulletAngleVariance} property.\n   */\n  private _bulletAngleVariance = 0;\n\n  /**\n   * Private var that holds the public {@link bulletSpeed} property.\n   */\n  private _bulletSpeed = 200;\n\n  /**\n   * Private var that holds the public {@link bulletSpeedVariance} property.\n   */\n  private _bulletSpeedVariance = 0;\n\n  /**\n   * Private var that holds the public {@link bulletLifespan} property.\n   */\n  private _bulletLifespan = 0;\n\n  /**\n   * Private var that holds the public {@link bulletKillDistance} property.\n   */\n  private _bulletKillDistance = 0;\n\n  /**\n   * Private var that holds the public {@link bulletGravity} property.\n   */\n  private _bulletGravity = new Phaser.Math.Vector2(0, 0);\n\n  /**\n   * Private var that holds the public {@link bulletRotateToVelocity} property.\n   */\n  private _bulletRotateToVelocity = false;\n\n  /**\n   * Private var that holds the public {@link bulletKey} property.\n   */\n  private _bulletKey: string;\n\n  /**\n   * Private var that holds the public {@link bulletFrame} property.\n   */\n  private _bulletFrame: string | integer;\n\n  /**\n   * Private var that holds the public {@link bulletClass} property.\n   */\n  private _bulletClass: typeof Bullet = Bullet;\n\n  /**\n   * Private var that holds the public {@link bulletCollideWorldBounds} property.\n   */\n  private _bulletCollideWorldBounds = false;\n\n  /**\n   * Private var that holds the public {@link bulletKillType} property.\n   */\n  private _bulletKillType: integer = KillType.KILL_WORLD_BOUNDS;\n\n  /**\n   * Holds internal data about custom bullet body sizes.\n   */\n  private _data: {\n    customBody: boolean;\n    width: number;\n    height: number;\n    offsetX: number;\n    offsetY: number;\n  } = {\n    customBody: false,\n    width: 0,\n    height: 0,\n    offsetX: 0,\n    offsetY: 0,\n  };\n\n  /**\n   * Private var that holds the public {@link bounds} property.\n   */\n  private _bounds = new Phaser.Geom.Rectangle();\n\n  /**\n   * Private var that holds the public {@link bulletBounds} property.\n   */\n  private _bulletBounds: Phaser.Geom.Rectangle;\n\n  /**\n   * This array stores the frames added via {@link setBulletFrames}.\n   */\n  private _bulletFrames: integer[] = [];\n\n  /**\n   * Private var that holds the public {@link bulletFrameIndex} property.\n   */\n  private _bulletFrameIndex = 0;\n\n  /**\n   * An internal object that stores the animation data added via {@link addBulletAnimation}.\n   */\n  private anims: {\n    [name: string]: Phaser.Animations.Animation;\n  } = {};\n\n  /**\n   * Private var that holds the public {@link trackedSprite} property.\n   */\n  private _trackedSprite?: Phaser.GameObjects.Sprite | ObjectWithTransform;\n\n  /**\n   * Private var that holds the public {@link trackedPointer} property.\n   */\n  private _trackedPointer?: Phaser.Input.Pointer;\n\n  /**\n   * Private var that holds the public {@link multiFire} property.\n   */\n  private _multiFire = false;\n\n  /**\n   * Internal multiFire test flag.\n   */\n  private _hasFired = false;\n\n  /**\n   * Private var that holds the public {@link trackRotation} property.\n   */\n  private _trackRotation = false;\n\n  /**\n   * Private var that holds the public {@link trackOffset} property.\n   */\n  private _trackOffset = new Phaser.Math.Vector2();\n\n  /**\n   * Internal firing rate time tracking variable.\n   */\n  private _nextFire = 0;\n\n  /**\n   * Internal firing rate time tracking variable used by multiFire.\n   */\n  private _tempNextFire = 0;\n\n  /**\n   * Internal firing rotation tracking point.\n   */\n  private _rotatedPoint = new Phaser.Math.Vector2();\n\n  /**\n   * Log level for this weapon. Either `warn`, `error' or `off`. `warn` is the default.\n   * If you change this, please do so before setting any other properties.\n   */\n  logLevel: 'warn' | 'error' | 'off' = 'warn';\n\n  /**\n   * TODO: a builder style interface would be neat. Can be kicked way forward\n   * into polishing.\n   * @param scene - A reference to the {@link https://photonstorm.github.io/phaser3-docs/Phaser.Scene.html Phaser.Scene} instance.\n   * @param bulletLimit - The quantity of bullets to seed the Weapon with. If -1 it will set the pool to automatically expand.\n   * @param key - The texture cache key of the image that this Sprite will use.\n   * @param frame - If the Sprite image contains multiple frames you can specify which one to use here.\n   * @param group - Optional Group to add the object to.\n   */\n  constructor(\n    scene: Phaser.Scene,\n    bulletLimit?: number,\n    key = '',\n    frame = '',\n    group?: Phaser.GameObjects.Group\n  ) {\n    super();\n\n    this.scene = scene;\n    this._bulletKey = key;\n    this._bulletFrame = frame;\n    this._bulletBounds = this.scene.physics.world.bounds;\n\n    validateConfig(this);\n\n    this.createBullets(bulletLimit, key, frame, group);\n  }\n\n  /**\n   * This is the {@link https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Group.html Group} that contains all of the bullets managed by this plugin.\n   */\n  get bullets(): Phaser.GameObjects.Group {\n    return this._bullets;\n  }\n  set bullets(value: Phaser.GameObjects.Group) {\n    this._bullets = value;\n\n    validateConfig(this, 'bullets');\n  }\n\n  /**\n   * Should the bullet pool run out of bullets (i.e. they are all in flight) then this\n   * boolean controls if the Group will create a brand new bullet object or not.\n   * @default false\n   */\n  get autoExpandBulletsGroup(): boolean {\n    return this._autoExpandBulletsGroup;\n  }\n  set autoExpandBulletsGroup(value: boolean) {\n    this._autoExpandBulletsGroup = value;\n\n    validateConfig(this, 'autoExpandBulletsGroup');\n  }\n\n  /**\n   * Will this weapon auto fire? If set to true then a new bullet will be fired\n   * based on the {@link fireRate} value.\n   * @default false\n   */\n  get autofire(): boolean {\n    return this._autofire;\n  }\n  set autofire(value: boolean) {\n    this._autofire = value;\n\n    validateConfig(this, 'autofire');\n  }\n\n  /**\n   * The total number of bullets this Weapon has fired so far.\n   * You can limit the number of shots allowed (via {@link fireLimit}), and reset\n   * this total via {@link resetShots}.\n   * @default 0\n   */\n  get shots(): number {\n    return this._shots;\n  }\n  set shots(value: number) {\n    this._shots = value;\n\n    validateConfig(this, 'shots');\n  }\n\n  /**\n   * The maximum number of shots that this Weapon is allowed to fire before it stops.\n   * When the limit is hit the {@link WEAPON_FIRE_LIMIT} event is dispatched.\n   * You can reset the shot counter via {@link resetShots}.\n   * @default 0\n   */\n  get fireLimit(): number {\n    return this._fireLimit;\n  }\n  set fireLimit(value: number) {\n    this._fireLimit = value;\n\n    validateConfig(this, 'fireLimit');\n  }\n\n  /**\n   * The minimum interval between shots, in milliseconds.\n   * @default 100\n   */\n  get fireRate(): number {\n    return this._fireRate;\n  }\n  set fireRate(value: number) {\n    this._fireRate = value;\n\n    validateConfig(this, 'fireRate');\n  }\n\n  /**\n   * This is a modifier that is added to the {@link fireRate} each update to add variety\n   * to the firing rate of the Weapon. The value is given in milliseconds.\n   * If you've a {@link fireRate} of 200 and a {@link fireRateVariance} of 50 then the actual\n   * firing rate of the Weapon will be between 150 and 250.\n   * @default 0\n   */\n  get fireRateVariance(): number {\n    return this._fireRateVariance;\n  }\n  set fireRateVariance(value: number) {\n    this._fireRateVariance = value;\n\n    validateConfig(this, 'fireRateVariance');\n  }\n\n  /**\n   * This is a Rectangle from within which the bullets are fired. By default it's a 1x1\n   * rectangle, the equivalent of a Point. But you can change the width and height, and if\n   * larger than 1x1 it'll pick a random point within the rectangle to launch the bullet from.\n   */\n  get fireFrom(): Phaser.Geom.Rectangle {\n    return this._fireFrom;\n  }\n  set fireFrom(value: Phaser.Geom.Rectangle) {\n    this._fireFrom = value;\n\n    validateConfig(this, 'fireFrom');\n  }\n\n  /**\n   * The angle at which the bullets are fired. This can be a const such as {@link Angle.ANGLE_UP ANGLE_UP}\n   * or it can be any number from 0 to 360 inclusive, where 0 degrees is to the right.\n   * @default {@link Angle.ANGLE_UP ANGLE_UP}\n   */\n  get fireAngle(): integer {\n    return this._fireAngle;\n  }\n  set fireAngle(value: integer) {\n    this._fireAngle = value;\n\n    validateConfig(this, 'fireAngle');\n  }\n\n  /**\n   * When a Bullet is fired it can optionally inherit the velocity of the {@link trackedSprite} if set.\n   * @default false\n   */\n  get bulletInheritSpriteSpeed(): boolean {\n    return this._bulletInheritSpriteSpeed;\n  }\n  set bulletInheritSpriteSpeed(value: boolean) {\n    this._bulletInheritSpriteSpeed = value;\n\n    validateConfig(this, 'bulletInheritSpriteSpeed');\n  }\n\n  /**\n   * The string based name of the animation that the Bullet will be given on launch.\n   * This is set via {@link addBulletAnimation}.\n   * @default ''\n   */\n  get bulletAnimation(): string {\n    return this._bulletAnimation;\n  }\n  set bulletAnimation(value: string) {\n    this._bulletAnimation = value;\n\n    validateConfig(this, 'bulletAnimation');\n  }\n\n  /**\n   * If you've added a set of frames via {@link setBulletFrames} then you can optionally\n   * chose for each Bullet fired to pick a random frame from the set.\n   * @default false\n   */\n  get bulletFrameRandom(): boolean {\n    return this._bulletFrameRandom;\n  }\n  set bulletFrameRandom(value: boolean) {\n    this._bulletFrameRandom = value;\n\n    validateConfig(this, 'bulletFrameRandom');\n  }\n\n  /**\n   * If you've added a set of frames via {@link setBulletFrames} then you can optionally\n   * chose for each Bullet fired to use the next frame in the set. The frame index is then\n   * advanced one frame until it reaches the end of the set, then it starts from the start\n   * again. Cycling frames like this allows you to create varied bullet effects via\n   * sprite sheets.\n   * @default false\n   */\n  get bulletFrameCycle(): boolean {\n    return this._bulletFrameCycle;\n  }\n  set bulletFrameCycle(value: boolean) {\n    this._bulletFrameCycle = value;\n\n    validateConfig(this, 'bulletFrameCycle');\n  }\n\n  /**\n   * Should the Bullets wrap around the world bounds? This automatically calls\n   * {@link https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.World.html#wrap World.wrap} on the Bullet each frame. See the docs for that method for details.\n   * @default false\n   */\n  get bulletWorldWrap(): boolean {\n    return this._bulletWorldWrap;\n  }\n  set bulletWorldWrap(value: boolean) {\n    this._bulletWorldWrap = value;\n\n    validateConfig(this, 'bulletWorldWrap');\n  }\n\n  /**\n   * If {@link bulletWorldWrap} is true then you can provide an optional padding value with this\n   * property. It's added to the calculations determining when the Bullet should wrap around\n   * the world or not. The value is given in pixels.\n   * @default 0\n   */\n  get bulletWorldWrapPadding(): integer {\n    return this._bulletWorldWrapPadding;\n  }\n  set bulletWorldWrapPadding(value: integer) {\n    this._bulletWorldWrapPadding = value;\n\n    validateConfig(this, 'bulletWorldWrapPadding');\n  }\n\n  /**\n   * An optional angle offset applied to the Bullets when they are launched.\n   * This is useful if for example your bullet sprites have been drawn facing up, instead of\n   * to the right, and you want to fire them at an angle. In which case you can set the\n   * angle offset to be 90 and they'll be properly rotated when fired.\n   * @default 0\n   */\n  get bulletAngleOffset(): number {\n    return this._bulletAngleOffset;\n  }\n  set bulletAngleOffset(value: number) {\n    this._bulletAngleOffset = value;\n\n    validateConfig(this, 'bulletAngleOffset');\n  }\n\n  /**\n   * This is a variance added to the angle of Bullets when they are fired.\n   * If you fire from an angle of 90 and have a {@link bulletAngleVariance} of 20 then the actual\n   * angle of the Bullets will be between 70 and 110 degrees. This is a quick way to add a\n   * great 'spread' effect to a Weapon.\n   * @default 0\n   */\n  get bulletAngleVariance(): number {\n    return this._bulletAngleVariance;\n  }\n  set bulletAngleVariance(value: number) {\n    this._bulletAngleVariance = value;\n\n    validateConfig(this, 'bulletAngleVariance');\n  }\n\n  /**\n   * The initial velocity of fired bullets, in pixels per second.\n   * @default 200\n   */\n  get bulletSpeed(): number {\n    return this._bulletSpeed;\n  }\n  set bulletSpeed(value: number) {\n    this._bulletSpeed = value;\n\n    validateConfig(this, 'bulletSpeed');\n  }\n\n  /**\n   * This is a variance added to the speed of Bullets when they are fired.\n   * If bullets have a {@link bulletSpeed} value of 200, and a {@link bulletSpeedVariance} of 50\n   * then the actual speed of the Bullets will be between 150 and 250 pixels per second.\n   * @default 0\n   */\n  get bulletSpeedVariance(): number {\n    return this._bulletSpeedVariance;\n  }\n  set bulletSpeedVariance(value: number) {\n    this._bulletSpeedVariance = value;\n\n    validateConfig(this, 'bulletSpeedVariance');\n  }\n\n  /**\n   * If you've set {@link bulletKillType} to {@link KillType.KILL_LIFESPAN KILL_LIFESPAN} this controls the amount\n   * of lifespan the Bullets have set on launch. The value is given in milliseconds.\n   * When a Bullet hits its lifespan limit it will be automatically killed.\n   * @default 0\n   */\n  get bulletLifespan(): number {\n    return this._bulletLifespan;\n  }\n  set bulletLifespan(value: number) {\n    this._bulletLifespan = value;\n\n    validateConfig(this, 'bulletLifespan');\n  }\n\n  /**\n   * If you've set {@link bulletKillType} to {@link KillType.KILL_DISTANCE KILL_DISTANCE} this controls the distance\n   * the Bullet can travel before it is automatically killed. The distance is given in pixels.\n   * @default 0\n   */\n  get bulletKillDistance(): number {\n    return this._bulletKillDistance;\n  }\n  set bulletKillDistance(value: number) {\n    this._bulletKillDistance = value;\n\n    validateConfig(this, 'bulletKillDistance');\n  }\n\n  /**\n   * This is the amount of {@link https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.Body.html#gravity Phaser.Physics.Arcade.Body.gravity} added to the Bullets physics body when fired.\n   * Gravity is expressed in pixels / second / second.\n   */\n  get bulletGravity(): Phaser.Math.Vector2 {\n    return this._bulletGravity;\n  }\n  set bulletGravity(value: Phaser.Math.Vector2) {\n    this._bulletGravity = value;\n\n    validateConfig(this, 'bulletGravity');\n  }\n\n  /**\n   * Bullets can optionally adjust their rotation in-flight to match their velocity.\n   * This can create the effect of a bullet 'pointing' to the path it is following, for example\n   * an arrow being fired from a bow, and works especially well when added to {@link bulletGravity}.\n   * @default false\n   */\n  get bulletRotateToVelocity(): boolean {\n    return this._bulletRotateToVelocity;\n  }\n  set bulletRotateToVelocity(value: boolean) {\n    this._bulletRotateToVelocity = value;\n\n    validateConfig(this, 'bulletRotateToVelocity');\n  }\n\n  /**\n   * The Texture Key that the Bullets use when rendering.\n   * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\n   * @default ''\n   */\n  get bulletKey(): string {\n    return this._bulletKey;\n  }\n  set bulletKey(value: string) {\n    this._bulletKey = value;\n\n    validateConfig(this, 'bulletKey');\n  }\n\n  /**\n   * The Texture Frame that the Bullets use when rendering.\n   * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\n   * @default ''\n   */\n  get bulletFrame(): string | integer {\n    return this._bulletFrame;\n  }\n  set bulletFrame(value: string | integer) {\n    this._bulletFrame = value;\n\n    validateConfig(this, 'bulletFrame');\n  }\n\n  /**\n   * The Class of the bullets that are launched by this Weapon. Defaults to {@link Bullet}, but can be\n   * overridden before calling {@link createBullets} and set to your own class type.\n   *\n   * It should be a constructor function accepting `(scene, x, y, key, frame)`.\n   * @default Bullet\n   */\n  get bulletClass(): typeof Bullet {\n    return this._bulletClass;\n  }\n  set bulletClass(classType: typeof Bullet) {\n    this._bulletClass = classType;\n\n    // `this.bullets` exists only after createBullets()\n    if (this.bullets) {\n      this.bullets.classType = this._bulletClass;\n    }\n\n    validateConfig(this, 'bulletClass');\n  }\n\n  /**\n   * Should bullets collide with the World bounds or not?\n   * @default false\n   */\n  get bulletCollideWorldBounds(): boolean {\n    return this._bulletCollideWorldBounds;\n  }\n  set bulletCollideWorldBounds(value: boolean) {\n    this._bulletCollideWorldBounds = value;\n\n    (this.bullets.children as Phaser.Structs.Set<Bullet>).each(child => {\n      child.body.collideWorldBounds = value;\n      child.setData('bodyDirty', false);\n    });\n\n    validateConfig(this, 'bulletCollideWorldBounds');\n  }\n\n  /**\n   * This controls how the bullets will be killed. The default is {@link KillType.KILL_WORLD_BOUNDS KILL_WORLD_BOUNDS}.\n   *\n   * There are 7 different \"kill types\" available:\n   *\n   * * {@linkcode KillType.KILL_NEVER KILL_NEVER}\n   * The bullets are never destroyed by the Weapon. It's up to you to destroy them via your own code.\n   *\n   * * {@linkcode KillType.KILL_LIFESPAN KILL_LIFESPAN}\n   * The bullets are automatically killed when their {@link bulletLifespan} amount expires.\n   *\n   * * {@linkcode KillType.KILL_DISTANCE KILL_DISTANCE}\n   * The bullets are automatically killed when they\n   * exceed {@link bulletKillDistance} pixels away from their original launch position.\n   *\n   * * {@linkcode KillType.KILL_WEAPON_BOUNDS KILL_WEAPON_BOUNDS}\n   * The bullets are automatically killed when they no longer intersect with the {@link bounds} rectangle.\n   *\n   * * {@linkcode KillType.KILL_CAMERA_BOUNDS KILL_CAMERA_BOUNDS}\n   * The bullets are automatically killed when they no longer intersect with the {@link https://photonstorm.github.io/phaser3-docs/Phaser.Cameras.Scene2D.Camera.html#getBounds Camera.getBounds} rectangle.\n   *\n   * * {@linkcode KillType.KILL_WORLD_BOUNDS KILL_WORLD_BOUNDS}\n   * The bullets are automatically killed when they no longer intersect with the {@link https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.World.html#bounds World.bounds} rectangle.\n   *\n   * * {@linkcode KillType.KILL_STATIC_BOUNDS KILL_STATIC_BOUNDS}\n   * The bullets are automatically killed when they no longer intersect with the {@link bounds} rectangle.\n   * The difference between static bounds and weapon bounds, is that a static bounds will never be adjusted to\n   * match the position of a tracked sprite or pointer.\n   * @default {@link KillType.KILL_WORLD_BOUNDS KILL_WORLD_BOUNDS}\n   */\n  get bulletKillType(): integer {\n    return this._bulletKillType;\n  }\n  set bulletKillType(type: integer) {\n    switch (type) {\n      case KillType.KILL_STATIC_BOUNDS:\n      case KillType.KILL_WEAPON_BOUNDS:\n        this.bulletBounds = this.bounds;\n        break;\n\n      case KillType.KILL_CAMERA_BOUNDS:\n        this.bulletBounds = this.scene.sys.cameras.main.getBounds();\n        break;\n\n      case KillType.KILL_WORLD_BOUNDS:\n        this.bulletBounds = this.scene.physics.world.bounds;\n        break;\n    }\n\n    this._bulletKillType = type;\n\n    validateConfig(this, 'bulletKillType');\n  }\n\n  /**\n   * This Rectangle defines the bounds that are used when determining if a Bullet should be killed or not.\n   * It's used in combination with {@link bulletKillType} when that is set to either {@link KillType.KILL_WEAPON_BOUNDS KILL_WEAPON_BOUNDS}\n   * or {@link KillType.KILL_STATIC_BOUNDS KILL_STATIC_BOUNDS}. If you are not using either of these kill types then the bounds are ignored.\n   * If you are tracking a Sprite or Point then the bounds are centered on that object every frame.\n   */\n  get bounds(): Phaser.Geom.Rectangle {\n    return this._bounds;\n  }\n  set bounds(value: Phaser.Geom.Rectangle) {\n    this._bounds = value;\n\n    validateConfig(this, 'bounds');\n  }\n\n  /**\n   * The Rectangle used to calculate the bullet bounds from.\n   */\n  get bulletBounds(): Phaser.Geom.Rectangle {\n    return this._bulletBounds;\n  }\n  set bulletBounds(value: Phaser.Geom.Rectangle) {\n    this._bulletBounds = value;\n\n    validateConfig(this, 'bulletBounds');\n  }\n\n  /**\n   * This array stores the frames added via {@link setBulletFrames}.\n   */\n  get bulletFrames(): integer[] {\n    return this._bulletFrames;\n  }\n  set bulletFrames(value: integer[]) {\n    this._bulletFrames = value;\n\n    validateConfig(this, 'bulletFrames');\n  }\n\n  /**\n   * The index of the frame within {@link bulletFrames} that is currently being used.\n   * This value is only used if {@link bulletFrameCycle} is set to `true`.\n   */\n  get bulletFrameIndex(): number {\n    return this._bulletFrameIndex;\n  }\n  set bulletFrameIndex(value: number) {\n    this._bulletFrameIndex = value;\n\n    validateConfig(this, 'bulletFrameIndex');\n  }\n\n  /**\n   * The Sprite currently being tracked by the Weapon, if any.\n   * This is set via the {@link trackSprite} method.\n   */\n  get trackedSprite():\n    | Phaser.GameObjects.Sprite\n    | ObjectWithTransform\n    | undefined {\n    return this._trackedSprite;\n  }\n  set trackedSprite(\n    value: Phaser.GameObjects.Sprite | ObjectWithTransform | undefined\n  ) {\n    this._trackedSprite = value;\n\n    validateConfig(this, 'trackedSprite');\n  }\n\n  /**\n   * The Pointer currently being tracked by the Weapon, if any.\n   * This is set via the {@link trackPointer} method.\n   */\n  get trackedPointer(): Phaser.Input.Pointer | undefined {\n    return this._trackedPointer;\n  }\n  set trackedPointer(value: Phaser.Input.Pointer | undefined) {\n    this._trackedPointer = value;\n\n    validateConfig(this, 'trackedPointer');\n  }\n\n  /**\n   * If you want this Weapon to be able to fire more than 1 bullet in a single\n   * update, then set this property to `true`. When `true` the Weapon plugin won't\n   * set the shot / firing timers until the {@link postRender} phase of the game loop.\n   * This means you can call {@link fire} (and similar methods) as often as you like in one\n   * single game update.\n   * @default false\n   */\n  get multiFire(): boolean {\n    return this._multiFire;\n  }\n  set multiFire(value: boolean) {\n    this._multiFire = value;\n\n    validateConfig(this, 'multiFire');\n  }\n\n  /**\n   * If the Weapon is tracking a Sprite, should it also track the Sprites rotation?\n   * This is useful for a game such as Asteroids, where you want the weapon to fire based\n   * on the sprites rotation.\n   * @default false\n   */\n  get trackRotation(): boolean {\n    return this._trackRotation;\n  }\n  set trackRotation(value: boolean) {\n    this._trackRotation = value;\n\n    validateConfig(this, 'trackRotation');\n  }\n\n  /**\n   * The Track Offset is a Vector2 object that allows you to specify a pixel offset that bullets use\n   * when launching from a tracked Sprite or Pointer. For example if you've got a bullet that is 2x2 pixels\n   * in size, but you're tracking a Sprite that is 32x32, then you can set `trackOffset.x = 16` to have\n   * the bullet launched from the center of the Sprite.\n   */\n  get trackOffset(): Phaser.Math.Vector2 {\n    return this._trackOffset;\n  }\n  set trackOffset(value: Phaser.Math.Vector2) {\n    this._trackOffset = value;\n\n    validateConfig(this, 'trackOffset');\n  }\n\n  /**\n   * The x coordinate from which bullets are fired. This is the same as {@link Weapon.fireFrom}.x, and\n   * can be overridden by the {@link fire} arguments.\n   */\n  get x(): number {\n    return this.fireFrom.x;\n  }\n  set x(value: number) {\n    this.fireFrom.x = value;\n  }\n\n  /**\n   * The y coordinate from which bullets are fired. This is the same as {@link Weapon.fireFrom}.y, and\n   * can be overridden by the {@link fire} arguments.\n   */\n  get y(): number {\n    return this.fireFrom.y;\n  }\n  set y(value: number) {\n    this.fireFrom.y = value;\n  }\n\n  /**\n   * This method performs two actions: First it will check to see if the\n   * {@link bullets} Group exists or not, and if not it creates it, adding its\n   * children to the `group` given as the 4th argument.\n   *\n   * Then it will seed the bullet pool with the `quantity` number of Bullets,\n   * using the texture key and frame provided (if any).\n   *\n   * If for example you set the quantity to be 10, then this Weapon will only\n   * ever be able to have 10 bullets in-flight simultaneously. If you try to\n   * fire an 11th bullet then nothing will happen until one, or more, of the\n   * in-flight bullets have been killed, freeing them up for use by the Weapon\n   * again.\n   *\n   * If you do not wish to have a limit set, then pass in -1 as the quantity.\n   * In this instance the Weapon will keep increasing the size of the bullet\n   * pool as needed. It will never reduce the size of the pool however, so be\n   * careful it doesn't grow too large.\n   *\n   * You can either set the texture key and frame here, or via the\n   * {@link bulletKey} and {@link bulletFrame} properties. You can also\n   * animate bullets, or set them to use random frames. All Bullets belonging\n   * to a single Weapon instance must share the same texture key however.\n   *\n   * @param quantity - The quantity of bullets to seed the Weapon\n   *  with. If -1 it will set the pool to automatically expand.\n   * @param key - The texture cache key of the image that this\n   *  Sprite will use.\n   * @param frame - If the Sprite image contains multiple\n   *  frames you can specify which one to use here.\n   * @param group - Optional Group to add the object to.\n   * @return This Weapon instance.\n   */\n  createBullets(\n    quantity: integer = 1,\n    key?: string,\n    frame?: integer | string,\n    group?: Phaser.GameObjects.Group,\n    bulletClass?: typeof Bullet\n  ): this {\n    if (bulletClass) {\n      this._bulletClass = bulletClass;\n    }\n\n    if (!this.bullets || !this.bullets.scene) {\n      this.bullets = this.scene.add.group({\n        classType: this._bulletClass,\n        maxSize: quantity,\n        runChildUpdate: true,\n      });\n    }\n\n    if (quantity !== 0) {\n      if (quantity === -1) {\n        this.autoExpandBulletsGroup = true;\n        quantity = 1;\n      }\n\n      this.bullets.createMultiple({\n        key,\n        frame,\n        repeat: quantity,\n        active: false,\n        visible: false,\n      });\n\n      (this.bullets.children as Phaser.Structs.Set<Bullet>).each(child => {\n        child.setData('bulletManager', this);\n      });\n\n      if (typeof key === 'string') {\n        this.bulletKey = key;\n      }\n\n      if (typeof frame === 'string') {\n        this.bulletFrame;\n      }\n\n      if (group) {\n        group.addMultiple(this.bullets.children.entries);\n      }\n    }\n\n    return this;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * Call a function on each in-flight bullet in this Weapon.\n   *\n   * See {@link https://photonstorm.github.io/phaser3-docs/Phaser.Structs.Set.html#each Set.each} for more details.\n   *\n   * @param callback - The function that will be called for each applicable child.\n   * The child will be passed as the first argument.\n   * @param callbackContext - The context in which the function should be called (usually 'this').\n   * @param args - Additional arguments to pass to the callback function, after the child item.\n   * @return This Weapon instance.\n   */\n  forEach(\n    callback: (\n      child: Phaser.GameObjects.GameObject,\n      ...args: unknown[]\n    ) => void,\n    callbackContext: unknown,\n    ...args: unknown[]\n  ): this {\n    this.bullets.children.each(child => {\n      if (child.active) {\n        callback.call(callbackContext, child, args);\n      }\n    });\n\n    return this;\n  }\n  /* eslint-enable no-unused-vars */\n\n  /**\n   * Sets {@link https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.Body.html#enable Body.enable} to `false` on each bullet in this Weapon.\n   * This has the effect of stopping them in-flight should they be moving.\n   * It also stops them being able to be checked for collision.\n   *\n   * @return This Weapon instance.\n   */\n  pauseAll(): this {\n    (this.bullets.children as Phaser.Structs.Set<Bullet>).each(child => {\n      child.body.enable = false;\n      const timeEvent = child.getData('timeEvent');\n      if (timeEvent !== undefined) {\n        timeEvent.paused = true;\n      }\n    }, this);\n\n    return this;\n  }\n\n  /**\n   * Sets {@link https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.Body.html#enable Body.enable} to `true` on each bullet in this Weapon.\n   * This has the effect of resuming their motion should they be in-flight.\n   * It also enables them for collision checks again.\n   *\n   * @return This Weapon instance.\n   */\n  resumeAll(): this {\n    (this.bullets.children as Phaser.Structs.Set<Bullet>).each(child => {\n      child.body.enable = true;\n      const timeEvent = child.getData('timeEvent');\n      if (timeEvent !== undefined) {\n        timeEvent.paused = false;\n      }\n    }, this);\n\n    return this;\n  }\n\n  /**\n   * Calls {@link Bullet.kill} on every in-flight bullet in this Weapon.\n   * Also re-enables their physics bodies, should they have been disabled via {@link pauseAll}.\n   *\n   * @return This Weapon instance.\n   */\n  killAll(): this {\n    (this.bullets.children as Phaser.Structs.Set<Bullet>).each(child => {\n      if (child.active) {\n        child.kill();\n      }\n      child.body.enable = true;\n    });\n\n    return this;\n  }\n\n  /**\n   * Resets the {@link shots} counter back to zero. This is used when you've set\n   * {@link fireLimit} and have hit (or just wish to reset) your limit.\n   *\n   * @param newLimit - Optionally set a new {@link fireLimit}.\n   * @return This Weapon instance.\n   */\n  resetShots(newLimit?: integer): this {\n    this.shots = 0;\n\n    if (newLimit !== undefined) {\n      this.fireLimit = newLimit;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets this Weapon to track the given Sprite, or any {@link ObjectWithTransform Object with x/y coords and optionally rotation}\n   * When a Weapon tracks a Sprite it will automatically update its {@link fireFrom} value to match the\n   * Sprite's position within the Game World, adjusting the coordinates based on the offset arguments.\n   *\n   * This allows you to lock a Weapon to a Sprite, so that bullets are always launched from its location.\n   *\n   * Calling {@link trackSprite} will reset {@link trackedPointer} to undefined, should it have been set, as you can\n   * only track _either_ a Sprite, or a Pointer, at once, but not both.\n   *\n   * @param sprite - The Sprite to track the position of.\n   * @param offsetX - The horizontal offset from the Sprites position to be applied to the Weapon.\n   * @param offsetY - The vertical offset from the Sprites position to be applied to the Weapon.\n   * @param trackRotation - Should the Weapon also track the Sprites rotation?\n   * @return This Weapon instance.\n   */\n  trackSprite(\n    sprite: Phaser.GameObjects.Sprite | ObjectWithTransform,\n    offsetX: integer = 0,\n    offsetY: integer = 0,\n    trackRotation = false\n  ): this {\n    this.trackedPointer = undefined;\n    this.trackedSprite = sprite;\n    this.trackRotation = trackRotation;\n\n    this.trackOffset.set(offsetX, offsetY);\n\n    return this;\n  }\n\n  /**\n   * Sets this Weapon to track the given Pointer.\n   * When a Weapon tracks a Pointer it will automatically update its {@link fireFrom} value to match the Pointer's\n   * position within the Game World, adjusting the coordinates based on the offset arguments.\n   *\n   * This allows you to lock a Weapon to a Pointer, so that bullets are always launched from its location.\n   *\n   * Calling {@link trackPointer} will reset {@link trackedSprite} to undefined, should it have been set, as you can\n   * only track _either_ a Pointer, or a Sprite, at once, but not both.\n   *\n   * @param pointer - The Pointer to track the position of.\n   * Defaults to {@link https://photonstorm.github.io/phaser3-docs/Phaser.Input.InputPlugin.html#activePointer InputPlugin.activePointer} if not specified.\n   * @param offsetX - The horizontal offset from the Pointers position to be applied to the Weapon.\n   * @param offsetY - The vertical offset from the Pointers position to be applied to the Weapon.\n   * @return This Weapon instance.\n   */\n  trackPointer(\n    pointer?: Phaser.Input.Pointer,\n    offsetX: integer = 0,\n    offsetY: integer = 0\n  ): this {\n    if (pointer === undefined && this.scene.input) {\n      pointer = this.scene.input.activePointer;\n    }\n\n    this.trackedPointer = pointer;\n    this.trackedSprite = undefined;\n    this.trackRotation = false;\n\n    this.trackOffset.set(offsetX, offsetY);\n\n    return this;\n  }\n\n  /**\n   * Attempts to fire multiple bullets from the positions defined in the given array.\n   *\n   * If you provide a `from` argument, or if there is a tracked Sprite or Pointer, then\n   * the positions are treated as __offsets__ from the given objects position.\n   *\n   * If `from` is undefined, and there is no tracked object, then the bullets are fired\n   * from the given positions, as they exist in the world.\n   *\n   * Calling this method sets {@link multiFire} to `true`.\n   *\n   * If there are not enough bullets available in the pool, and the pool cannot be extended,\n   * then this method may not fire from all of the given positions.\n   *\n   * When the bullets are launched they have their texture and frame updated, as required.\n   * The velocity of the bullets are calculated based on Weapon properties like {@link bulletSpeed}.\n   *\n   * @param positions - An array of positions. Each position can be any Object, as long as it\n   * has public `x` and `y` properties, such as {@link https://photonstorm.github.io/phaser3-docs/Phaser.Geom.Point.html Point}, { x: 0, y: 0 }, {@link https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Sprite.html Sprite}\n   * @param from Optionally fires the bullets **from** the {@link x} and {@link y} properties of this object,\n   * _instead_ of any {@link trackedSprite} or {@link trackedPointer} that is set.\n   * @return An array containing all of the fired Bullet objects,\n   * if a launch was successful, otherwise an empty array.\n   */\n  fireMany(\n    positions: ObjectWithXY[],\n    from: Phaser.GameObjects.Sprite | Phaser.Math.Vector2 | ObjectWithTransform\n  ): Bullet[] {\n    this.multiFire = true;\n\n    const bullets: Bullet[] = [];\n\n    if (from || this.trackedSprite || this.trackedPointer) {\n      positions.forEach(offset => {\n        const bullet = this.fire(from, null, null, offset.x, offset.y);\n        if (bullet) {\n          bullets.push(bullet);\n        }\n      });\n    } else {\n      positions.forEach(position => {\n        const bullet = this.fire(position);\n        if (bullet) {\n          bullets.push(bullet);\n        }\n      });\n    }\n\n    return bullets;\n  }\n\n  /**\n   * Attempts to fire a single Bullet from a tracked Sprite or Pointer, but applies an offset\n   * to the position first. This is the same as calling {@link fire} and passing in the offset arguments.\n   *\n   * If there are no more bullets available in the pool, and the pool cannot be extended,\n   * then this method returns `undefined`. It will also return `undefined` if not enough time has expired since the last time\n   * the Weapon was fired, as defined in the {@link fireRate} property.\n   *\n   * Otherwise the first available bullet is selected, launched, and returned.\n   *\n   * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\n   * calculated based on Weapon properties like {@link bulletSpeed}.\n   *\n   * If you wish to fire multiple bullets in a single game update, then set {@link multiFire} to `true`\n   * and you can call this method as many times as you like, per loop. See also {@link fireMany}.\n   *\n   * @param offsetX - The horizontal offset from the position of the tracked Sprite or Pointer,\n   * as set with {@link trackSprite}.\n   * @param offsetY - The vertical offset from the position of the tracked Sprite or Pointer,\n   * as set with {@link trackSprite}.\n   * @return The fired bullet, if a launch was successful, otherwise `undefined`.\n   */\n  fireOffset(offsetX = 0, offsetY = 0): Bullet | undefined {\n    return this.fire(null, null, null, offsetX, offsetY);\n  }\n\n  /**\n   * Fires a bullet **at** the given Pointer. The bullet will be launched from the {@link fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param pointer - The Pointer to fire the bullet towards.\n   * @return The fired bullet if successful, undefined otherwise.\n   */\n  fireAtPointer(pointer?: Phaser.Input.Pointer): Bullet | undefined {\n    if (pointer === undefined && this.scene.input) {\n      pointer = this.scene.input.activePointer;\n    }\n\n    return this.fire(null, pointer?.x, pointer?.y);\n  }\n\n  /**\n   * Fires a bullet **at** the given Sprite. The bullet will be launched from the {@link fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param sprite - The Sprite to fire the bullet towards.\n   * @return The fired bullet if successful, undefined otherwise.\n   */\n  fireAtSprite(sprite?: Phaser.GameObjects.Sprite): Bullet | undefined {\n    return this.fire(null, sprite?.x, sprite?.y);\n  }\n\n  /**\n   * Fires a bullet **at** the given coordinates. The bullet will be launched from the {@link fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param x - The x coordinate, in world space, to fire the bullet towards.\n   * @param y - The y coordinate, in world space, to fire the bullet towards.\n   * @return The fired bullet if successful, undefined otherwise.\n   */\n  fireAtXY(x?: number, y?: number): Bullet | undefined {\n    return this.fire(null, x, y);\n  }\n\n  /**\n   * Attempts to fire a single Bullet. If there are no more bullets available in the pool,\n   * and the pool cannot be extended, then this method returns `undefined`. It will also return `undefined`\n   * if not enough time has expired since the last time the Weapon was fired,\n   * as defined in the {@link fireRate} property.\n   *\n   * Otherwise the first available bullet is selected, launched, and returned.\n   *\n   * The arguments are all optional, but allow you to control both where the bullet is launched from, and aimed at.\n   *\n   * If you don't provide any of the arguments then it uses those set via properties such as {@link trackedSprite},\n   * {@link fireAngle} and so on.\n   *\n   * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\n   * calculated based on Weapon properties like {@link bulletSpeed}.\n   *\n   * If you wish to fire multiple bullets in a single game update, then set `Weapon.multiFire = true`\n   * and you can call {@link fire} as many times as you like, per loop. Multiple fires in a single update\n   * only counts once towards the {@link shots} total, but you will still receive an event for each bullet.\n   *\n   * @param from Optionally fires the bullet **from** the {@link x} and {@link y} properties of this object.\n   * If set this overrides {@link trackedSprite} or {@link trackedPointer}. Pass `null` to ignore it.\n   * @param x - The x coordinate, in world space, to fire the bullet **towards**.\n   * If left as `undefined`, or `null`, the bullet direction is based on its angle.\n   * @param y - The y coordinate, in world space, to fire the bullet **towards**.\n   * If left as `undefined`, or `null`, the bullet direction is based on its angle.\n   * @param offsetX - If the bullet is fired from a tracked Sprite or Pointer,\n   * or the `from` argument is set, this applies a horizontal offset from the launch position.\n   * @param offsetY - If the bullet is fired from a tracked Sprite or Pointer,\n   * or the `from` argument is set, this applies a vertical offset from the launch position.\n   * @return The fired bullet, if a launch was successful, otherwise `undefined`.\n   */\n  fire(\n    from?:\n      | Phaser.GameObjects.Sprite\n      | Phaser.Math.Vector2\n      | ObjectWithTransform\n      | null,\n    x?: number | null,\n    y?: number | null,\n    offsetX = 0,\n    offsetY = 0\n  ): Bullet | undefined {\n    if (\n      this.scene.time.now < this._nextFire ||\n      (this.fireLimit > 0 && this.shots === this.fireLimit)\n    ) {\n      return undefined;\n    }\n\n    let speed = this.bulletSpeed;\n\n    //  Apply +- speed variance\n    if (this.bulletSpeedVariance !== 0) {\n      speed += Phaser.Math.Between(\n        -this.bulletSpeedVariance,\n        this.bulletSpeedVariance\n      );\n    }\n\n    // Position the fireFrom rectangle\n    if (from) {\n      // Fire based on passed coordinates\n      this.updateFireFrom(from.x, from.y);\n    } else if (\n      this.trackedSprite &&\n      typeof this.trackedSprite.rotation === 'number'\n    ) {\n      // Fire based on tracked sprite\n      if (this.trackRotation) {\n        this._rotatedPoint.set(\n          this.trackedSprite.x + this.trackOffset.x,\n          this.trackedSprite.y + this.trackOffset.y\n        );\n        Phaser.Math.RotateAround(\n          this._rotatedPoint,\n          this.trackedSprite.x,\n          this.trackedSprite.y,\n          this.trackedSprite.rotation\n        );\n\n        this.updateFireFrom(this._rotatedPoint.x, this._rotatedPoint.y);\n      } else {\n        this.updateFireFrom(this.trackedSprite.x, this.trackedSprite.y);\n      }\n\n      if (this.bulletInheritSpriteSpeed && this.trackedSprite.body) {\n        speed += (this.trackedSprite.body as Phaser.Physics.Arcade.Body).speed;\n      }\n    } else if (this.trackedPointer) {\n      // Fire based on tracked pointer\n      this.updateFireFrom(this.trackedPointer.x, this.trackedPointer.y);\n    }\n\n    // Take offset into account\n    this.fireFrom.x += offsetX;\n    this.fireFrom.y += offsetY;\n\n    // Pick a random coordinate inside the fireFrom rectangle if bigger than 1\n    const fromX =\n      this.fireFrom.width > 1\n        ? this.fireFrom.x + Math.random() * this.fireFrom.width\n        : this.fireFrom.x;\n    const fromY =\n      this.fireFrom.height > 1\n        ? this.fireFrom.y + Math.random() * this.fireFrom.height\n        : this.fireFrom.y;\n\n    let angle =\n      typeof this.trackedSprite?.angle === 'number' && this.trackRotation\n        ? this.trackedSprite.angle\n        : this.fireAngle;\n\n    //  The position (in world space) to fire the bullet towards, if set\n    if (typeof x === 'number' && typeof y === 'number') {\n      angle = Phaser.Math.RadToDeg(Math.atan2(y - fromY, x - fromX));\n    }\n\n    //  Apply +- angle variance\n    if (this.bulletAngleVariance !== 0) {\n      angle += Phaser.Math.Between(\n        -this.bulletAngleVariance,\n        this.bulletAngleVariance\n      );\n    }\n\n    let moveX = 0;\n    let moveY = 0;\n\n    //  Avoid unnecessary sin/cos for right-angled shots\n    if (angle === 0 || angle === 180) {\n      // Only cos needed\n      moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n    } else if (angle === 90 || angle === 270) {\n      // Only sin needed\n      moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n    } else {\n      // Need to calculate both\n      moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n      moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n    }\n\n    let bullet: Bullet | undefined;\n\n    // Attempt to get a bullet instance to use\n    if (this.autoExpandBulletsGroup) {\n      bullet = this.bullets.getFirstDead(\n        true,\n        fromX,\n        fromY,\n        this.bulletKey,\n        this.bulletFrame\n      );\n      bullet?.setData('bulletManager', this);\n    } else {\n      bullet = this.bullets.getFirstDead(false);\n    }\n\n    // Prepare and fire the bullet\n    if (bullet !== undefined) {\n      bullet.prepare(fromX, fromY);\n      bullet.setData({\n        fromX,\n        fromY,\n        killType: this.bulletKillType,\n        killDistance: this.bulletKillDistance,\n        rotateToVelocity: this.bulletRotateToVelocity,\n      });\n\n      // Prepare timer for bullet lifespan\n      if (this.bulletKillType === KillType.KILL_LIFESPAN) {\n        bullet.setData(\n          'timeEvent',\n          this.scene.time.addEvent({\n            delay: this.bulletLifespan,\n            callback: bullet.kill,\n            callbackScope: bullet,\n          })\n        );\n        bullet.lifespan = this.bulletLifespan;\n      }\n\n      bullet.angle = angle + this.bulletAngleOffset;\n\n      //  Frames and Animations\n      if (this.bulletAnimation) {\n        bullet.anims.play(this.bulletAnimation);\n      } else if (this.bulletFrameCycle) {\n        // Calculate bullet frame to use\n        if (this.bulletFrameIndex >= this.bulletFrames.length) {\n          this.bulletFrameIndex = 0;\n        }\n        bullet.setTexture(this.bulletKey, this.bulletFrameIndex);\n        this.bulletFrameIndex++;\n      } else if (this.bulletFrameRandom) {\n        // Pick a bullet frame at random\n        const nextFrame = Math.floor(Math.random() * this.bulletFrames.length);\n        bullet.setTexture(this.bulletKey, nextFrame);\n      }\n\n      // Set correct size and position for bullet body\n      if (bullet.getData('bodyDirty')) {\n        if (this._data.customBody) {\n          bullet.body.setSize(this._data.width, this._data.height);\n          bullet.body.setOffset(this._data.offsetX, this._data.offsetY);\n        }\n\n        bullet.body.collideWorldBounds = this.bulletCollideWorldBounds;\n\n        bullet.setData('bodyDirty', false);\n      }\n\n      bullet.body.setVelocity(moveX, moveY);\n      bullet.body.setGravity(this.bulletGravity.x, this.bulletGravity.y);\n\n      let next = 0;\n\n      // Calculate when to fire next bullet, taking into account speed variance\n      if (this.bulletSpeedVariance !== 0) {\n        let rate = this.fireRate;\n\n        rate += Phaser.Math.Between(\n          -this.fireRateVariance,\n          this.fireRateVariance\n        );\n\n        if (rate < 0) {\n          rate = 0;\n        }\n\n        next = this.scene.time.now + rate;\n      } else {\n        next = this.scene.time.now + this.fireRate;\n      }\n\n      // Prepare for next shot\n      if (this.multiFire) {\n        if (!this._hasFired) {\n          //  We only add 1 to the 'shots' count for multiFire shots\n          this._hasFired = true;\n          this._tempNextFire = next;\n          this.shots++;\n        }\n      } else {\n        this._nextFire = next;\n\n        this.shots++;\n      }\n\n      // Emit events\n      this.emit(WEAPON_FIRE, bullet, this, speed);\n\n      if (this.fireLimit > 0 && this.shots === this.fireLimit) {\n        this.emit(WEAPON_FIRE_LIMIT, this, this.fireLimit);\n      }\n    }\n\n    return bullet;\n  }\n\n  /**\n   * Set the fireFrom rectangle based on passed coords\n   * @private\n   * @param x - X coordinate for where to fire from\n   * @param y - Y coordinate for where to fire from\n   */\n  updateFireFrom(x: number, y: number): void {\n    if (this.fireFrom.width > 1) {\n      // If size is larger than 1, center on coordinates\n      Phaser.Geom.Rectangle.CenterOn(\n        this.fireFrom,\n        x + this.trackOffset.x,\n        y + this.trackOffset.y\n      );\n    } else {\n      this.fireFrom.x = x + this.trackOffset.x;\n      this.fireFrom.y = y + this.trackOffset.y;\n    }\n  }\n\n  /**\n   * You can modify the size of the physics Body the Bullets use to be any dimension you need.\n   * This allows you to make it smaller, or larger, than the parent Sprite.\n   * You can also control the x and y offset of the Body. This is the position of the\n   * Body relative to the top-left of the Sprite _texture_.\n   *\n   * For example: If you have a Sprite with a texture that is 80x100 in size,\n   * and you want the physics body to be 32x32 pixels in the middle of the texture, you would do:\n   *\n   * `setSize(32 / Math.abs(this.scale.x), 32 / Math.abs(this.scale.y), 24, 34)`\n   *\n   * Where the first two parameters are the new Body size (32x32 pixels) relative to the Sprite's scale.\n   * 24 is the horizontal offset of the Body from the top-left of the Sprites texture, and 34\n   * is the vertical offset.\n   *\n   * @param width - The width of the Body.\n   * @param height - The height of the Body.\n   * @param offsetX - The X offset of the Body from the top-left of the Sprites texture.\n   * @param offsetY - The Y offset of the Body from the top-left of the Sprites texture.\n   * @return This Weapon instance.\n   */\n  setBulletBodyOffset(\n    width: number,\n    height: number,\n    offsetX = 0,\n    offsetY = 0\n  ): this {\n    this._data.customBody = true;\n    this._data.width = width;\n    this._data.height = height;\n    this._data.offsetX = offsetX;\n    this._data.offsetY = offsetY;\n\n    //  Update all bullets in the pool\n    (this.bullets.children as Phaser.Structs.Set<Bullet>).each(child => {\n      child.body.setSize(width, height);\n      child.body.setOffset(offsetX, offsetY);\n      child.setData('bodyDirty', false);\n    });\n\n    return this;\n  }\n\n  /**\n   * Sets the texture frames that the bullets can use when being launched.\n   *\n   * This is intended for use when you've got numeric based frames, such as\n   * those loaded via a Sprite Sheet.\n   *\n   * It works by calling {@link https://photonstorm.github.io/phaser3-docs/Phaser.Utils.Array.html#.NumberArray Phaser.Utils.Array.NumberArray} internally, using\n   * the min and max values provided. Then it sets the frame index to be zero.\n   *\n   * You can optionally set the cycle and random booleans, to allow bullets to\n   * cycle through the frames when they're fired, or pick one at random.\n   *\n   * @param min - The minimum value the frame can be. Usually zero.\n   * @param max - The maximum value the frame can be.\n   * @param selectionMethod - Specifies how the\n   *  frame for the fired bullet will be selected. See {@link FrameType consts.FrameType}\n   *  for options.\n   * @return This Weapon instance.\n   */\n  setBulletFrames(\n    min: integer,\n    max: integer,\n    selectionMethod = FrameType.BULLET_FRAME_STABLE\n  ): this {\n    if (\n      typeof selectionMethod !== 'number' ||\n      selectionMethod < FrameType.BULLET_FRAME_STABLE ||\n      selectionMethod > FrameType.BULLET_FRAME_RANDOM\n    ) {\n      log(\n        `Invalid bullet frame selection method specified: ${selectionMethod}`,\n        this.logLevel\n      );\n    }\n\n    if (min > max) {\n      log(`min frame (${min}) must be <= max frame (${max})`, this.logLevel);\n    }\n\n    this.bulletFrames = Phaser.Utils.Array.NumberArray(min, max) as number[];\n    this.bulletFrameIndex = 0;\n    this.bulletFrameCycle = selectionMethod === FrameType.BULLET_FRAME_CYCLE;\n    this.bulletFrameRandom = selectionMethod === FrameType.BULLET_FRAME_RANDOM;\n\n    return this;\n  }\n\n  /**\n   * Adds a new animation under the given key. Optionally set the frames, frame rate and loop.\n   * The arguments are all the same as for {@link https://photonstorm.github.io/phaser3-docs/Phaser.Animations.AnimationManager.html#add AnimationManager.add}, and work in the same way.\n   *\n   * {@link bulletAnimation} will be set to this animation after it's created. From that point on, all\n   * bullets fired will play using this animation. You can swap between animations by calling this method\n   * several times, and then just changing the {@link bulletAnimation} property to the name of the animation\n   * you wish to play for the next launched bullet.\n   *\n   * If you wish to stop using animations at all, set {@link bulletAnimation} to '' (an empty string).\n   *\n   * @param name - The unique (within the Weapon instance) name for the animation, i.e. \"fire\", \"blast\".\n   * @param frames - An array of numbers/strings that correspond to the framesto add to this animation\n   * and in which order. e.g. [1, 2, 3] or ['run0', 'run1', run2]). If null then all frames will be used.\n   * @param frameRate - The speed at which the animation should play.\n   * The speed is given in frames per second.\n   * @param repeat - Number of times to repeat the animation. Set to -1 to repeat forever.\n   * @return This Weapon instance.\n   */\n  addBulletAnimation(\n    name: string,\n    frames?: Phaser.Types.Animations.AnimationFrame[],\n    frameRate = 60,\n    repeat = 0\n  ): this {\n    if (!this.scene.sys.anims.exists(name)) {\n      this.scene.sys.anims.create({\n        key: name,\n        frames,\n        frameRate,\n        repeat,\n      });\n\n      this.anims[name] = this.scene.sys.anims.get(name);\n    }\n\n    this.bulletAnimation = name;\n\n    return this;\n  }\n\n  /**\n   * Internal update method, called by the Weapon Plugin.\n   */\n  update(): void {\n    if (this._bulletKillType === KillType.KILL_WEAPON_BOUNDS) {\n      if (this.trackedSprite) {\n        Phaser.Geom.Rectangle.CenterOn(\n          this.bounds,\n          this.trackedSprite.x,\n          this.trackedSprite.y\n        );\n      } else if (this.trackedPointer) {\n        Phaser.Geom.Rectangle.CenterOn(\n          this.bounds,\n          this.trackedPointer.x,\n          this.trackedPointer.y\n        );\n      }\n    }\n\n    if (this.autofire) {\n      this.fire();\n    }\n  }\n\n  /**\n   * Internal update method, called by the Weapon Plugin.\n   */\n  postRender(): void {\n    if (!this.multiFire || !this._hasFired) {\n      return;\n    }\n\n    this._hasFired = false;\n\n    this._nextFire = this._tempNextFire;\n  }\n\n  /**\n   * Destroys this Weapon.\n   * You must release everything in here, all references, all objects, free it all up.\n   */\n  destroy(): void {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.scene = undefined;\n\n    this.bullets.destroy(true);\n  }\n}\n\nexport default Weapon;\n","import { KillType } from './consts';\nimport type { Weapon } from './main';\nimport { BULLET_KILL } from './events';\n\nlet bulletID = 0;\n\ntype BulletData = {\n  timeEvent?: Phaser.Time.TimerEvent;\n  bulletManager?: Weapon;\n  fromX: number;\n  fromY: number;\n  bodyDirty: boolean;\n  rotateToVelocity: boolean;\n  killType: KillType;\n  killDistance: number;\n  bodyBounds: Phaser.Geom.Rectangle;\n};\n\nclass Bullet extends Phaser.GameObjects.Sprite {\n  body!: Phaser.Physics.Arcade.Body;\n  bulletID: number;\n  lifespan?: number;\n\n  /**\n   * Create a new `Bullet` object. Bullets are used by the {@link Weapon} class, and are normal Sprites,\n   * with a few extra properties in the data manager to handle Weapon specific features.\n   *\n   * @param scene - A reference to the currently running scene.\n   * @param x - The x coordinate (in world space) to position the Bullet at.\n   * @param y - The y coordinate (in world space) to position the Bullet at.\n   * @param key - This is the image or texture used by the Particle during rendering.\n   * It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or {@link https://photonstorm.github.io/phaser3-docs/Phaser.Textures.Texture.html Texture}.\n   * @param frame - If this Bullet is using part of a sprite sheet or texture atlas\n   * you can specify the exact frame to use by giving a string or numeric index.\n   */\n  constructor(\n    scene: Phaser.Scene,\n    x: number,\n    y: number,\n    key: string,\n    frame: string | number\n  ) {\n    super(scene, x, y, key, frame);\n    this.bulletID = bulletID;\n    bulletID++;\n    this.scene.physics.add.existing(this);\n\n    this.setDataEnabled();\n\n    this.setData({\n      timeEvent: undefined,\n      bulletManager: undefined,\n      fromX: 0,\n      fromY: 0,\n      bodyDirty: true,\n      rotateToVelocity: false,\n      killType: KillType.KILL_NEVER,\n      killDistance: 0,\n      bodyBounds: new Phaser.Geom.Rectangle(),\n    });\n  }\n\n  /* eslint-disable no-unused-vars */\n\n  setData(key: Partial<BulletData>, data?: never): this;\n  setData(key: 'timeEvent', data: BulletData['timeEvent']): this;\n  setData(key: 'bulletManager', data: BulletData['bulletManager']): this;\n  setData(key: 'fromX', data: BulletData['fromX']): this;\n  setData(key: 'fromY', data: BulletData['fromY']): this;\n  setData(key: 'bodyDirty', data: BulletData['bodyDirty']): this;\n  setData(key: 'rotateToVelocity', data: BulletData['rotateToVelocity']): this;\n  setData(key: 'killType', data: BulletData['killType']): this;\n  setData(key: 'killDistance', data: BulletData['killDistance']): this;\n  setData(key: 'bodyBounds', data: BulletData['bodyBounds']): this;\n  setData(\n    key: string | Partial<BulletData>,\n    data?:\n      | boolean\n      | number\n      | Phaser.Time.TimerEvent\n      | Weapon\n      | Phaser.Geom.Rectangle\n      | undefined\n  ): this {\n    return super.setData(key, data);\n  }\n\n  getData(key: 'timeEvent'): BulletData['timeEvent'];\n  getData(key: 'bulletManager'): BulletData['bulletManager'];\n  getData(key: 'fromX'): BulletData['fromX'];\n  getData(key: 'fromY'): BulletData['fromY'];\n  getData(key: 'bodyDirty'): BulletData['bodyDirty'];\n  getData(key: 'rotateToVelocity'): BulletData['rotateToVelocity'];\n  getData(key: 'killType'): BulletData['killType'];\n  getData(key: 'killDistance'): BulletData['killDistance'];\n  getData(key: 'bodyBounds'): BulletData['bodyBounds'];\n  getData(\n    key: string\n  ):\n    | boolean\n    | number\n    | Phaser.Time.TimerEvent\n    | Weapon\n    | Phaser.Geom.Rectangle\n    | undefined {\n    return super.getData(key);\n  }\n\n  /* eslint-enable no-unused-vars */\n\n  /**\n   * Prepares this bullet to be fired and to interact with the rest\n   * of the scene again.\n   * @param x - Resets bullet position to this x coordinate\n   * @param y - Resets bullet position to this y coordinate\n   */\n  prepare(x: number, y: number): void {\n    this.setActive(true);\n    this.setVisible(true);\n    this.body.enable = true;\n    this.body.reset(x, y);\n\n    const debugPhysics = this.getData('bulletManager')?.debugPhysics || false;\n    this.body.debugShowBody = debugPhysics;\n    this.body.debugShowVelocity = debugPhysics;\n  }\n\n  /**\n   * Kills the Bullet, freeing it up for re-use by the Weapon bullet pool.\n   * Also dispatches the {@link BULLET_KILL} event on the {@link Weapon}.\n   * @returns This instance of the bullet class\n   */\n  kill(): this {\n    // Reproduce Phaser.Physics.Arcade.Components.Enable.disableBody because\n    // we can't assume that the bullet class has it built in.\n    this.body.stop();\n    this.body.enable = false;\n    this.setActive(false);\n    this.setVisible(false);\n    this.body.debugShowBody = false;\n    this.body.debugShowVelocity = false;\n\n    // TODO: potentially we don't need to destroy the time event and we can\n    // just pause when the bullet is killed and restart it when it's refired.\n    // For now though do the simple thing and discard it.\n    // Another option would be to use Date.now() and manually process pause\n    // events with a flag and some math.\n    // Both of those are probably premature optimizations.\n    const timeEvent = this.getData('timeEvent');\n    if (timeEvent !== undefined) {\n      timeEvent.destroy();\n      this.setData('timeEvent', undefined);\n    }\n\n    this.getData('bulletManager')?.emit(\n      BULLET_KILL,\n      this,\n      this.getData('bulletManager')\n    );\n\n    return this;\n  }\n\n  /**\n   * Updates the Bullet, killing as required.\n   */\n  update(): void {\n    if (!this.active) {\n      // this was previously a check to this.exists\n      return;\n    }\n\n    const bulletManager = this.getData('bulletManager') as Weapon;\n\n    if (this.getData('killType') > KillType.KILL_LIFESPAN) {\n      if (this.getData('killType') === KillType.KILL_DISTANCE) {\n        if (\n          new Phaser.Math.Vector2(\n            this.getData('fromX'),\n            this.getData('fromY')\n          ).distance((this as unknown) as Phaser.Math.Vector2) >\n          this.getData('killDistance')\n        ) {\n          this.kill();\n        }\n      } else if (\n        !Phaser.Geom.Intersects.RectangleToRectangle(\n          bulletManager.bulletBounds,\n          this.body.getBounds(\n            this.getData('bodyBounds')\n          ) as Phaser.Geom.Rectangle\n        )\n      ) {\n        this.kill();\n      }\n    }\n\n    if (this.getData('rotateToVelocity')) {\n      this.rotation = Math.atan2(this.body.velocity.y, this.body.velocity.x);\n    }\n\n    if (bulletManager.bulletWorldWrap) {\n      this.scene.physics.world.wrap(this, bulletManager.bulletWorldWrapPadding);\n    }\n  }\n}\n\nexport default Bullet;\n","/* eslint-disable no-unused-vars */\n/**\n * Kill type constants for {@link Weapon.bulletKillType}\n */\nenum KillType {\n  /**\n   * A {@link Weapon.bulletKillType bulletKillType} constant that stops the bullets from ever being destroyed automatically.\n   */\n  KILL_NEVER = 0,\n\n  /**\n   * A {@link Weapon.bulletKillType bulletKillType} constant that automatically kills the bullets\n   * when their {@link Weapon.bulletLifespan} expires.\n   */\n  KILL_LIFESPAN = 1,\n\n  /**\n   * A {@link Weapon.bulletKillType bulletKillType} constant that automatically kills the bullets after they\n   * exceed the {@link Weapon.bulletKillDistance} from their original firing position.\n   */\n  KILL_DISTANCE = 2,\n\n  /**\n   * A {@link Weapon.bulletKillType bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link Weapon.bounds} rectangle.\n   */\n  KILL_WEAPON_BOUNDS = 3,\n\n  /**\n   * A {@link Weapon.bulletKillType bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link https://photonstorm.github.io/phaser3-docs/Phaser.Cameras.Scene2D.Camera.html#getBounds Camera.getBounds} rectangle.\n   */\n  KILL_CAMERA_BOUNDS = 4,\n\n  /**\n   * A {@link Weapon.bulletKillType bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.World.html#bounds World.bounds} rectangle.\n   */\n  KILL_WORLD_BOUNDS = 5,\n\n  /**\n   * A {@link Weapon.bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link Weapon.bounds} rectangle.\n   * The difference between static bounds and weapon bounds, is that a static bounds will never be adjusted to\n   * match the position of a tracked sprite or pointer.\n   */\n  KILL_STATIC_BOUNDS = 6,\n}\n\nexport { KillType };\n\n/**\n * Angle constants that can be used anywhere you specify angles in degrees, for instance {@link Weapon.fireAngle} and {@link Weapon.bulletAngleOffset}.\n */\nenum Angle {\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face up.\n   */\n  ANGLE_UP = 270,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face down.\n   */\n  ANGLE_DOWN = 90,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face left.\n   */\n  ANGLE_LEFT = 180,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face right.\n   */\n  ANGLE_RIGHT = 0,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north east.\n   */\n  ANGLE_NORTH_EAST = 315,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north west.\n   */\n  ANGLE_NORTH_WEST = 225,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south east.\n   */\n  ANGLE_SOUTH_EAST = 45,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south west.\n   */\n  ANGLE_SOUTH_WEST = 135,\n}\n\nexport { Angle };\n\n/**\n * Bullet frame type constants for {@link Weapon.setBulletFrames}\n */\nenum FrameType {\n  /**\n   * When selecting a bullet frame the same frame should always be used. This\n   * is the default value.\n   */\n  BULLET_FRAME_STABLE = 0,\n\n  /**\n   * When selecting a bullet frame the next frame should be used\n   */\n  BULLET_FRAME_CYCLE = 1,\n\n  /**\n   * When selecting a bullet frame a random frame should be used.\n   */\n  BULLET_FRAME_RANDOM = 2,\n}\n\nexport { FrameType };\n\nexport default {\n  KillType,\n  Angle,\n  FrameType,\n};\n","/**\n * This event is dispatched when a weapon is fired.\n *\n * @event WEAPON_FIRE\n *\n * @param {Bullet} bullet - The bullet that was fired\n * @param {Weapon} weapon - The weapon emitting the event\n * @param {number} speed - The speed of the bullet\n */\nexport const WEAPON_FIRE = 'fire';\n\n/**\n * This event is dispatched when the weapon's fire limit is reached.\n *\n * @event WEAPON_FIRE_LIMIT\n *\n * @param {Weapon} weapon - The weapon emitting the event\n * @param {number} fireLimist - The fire limit\n */\nexport const WEAPON_FIRE_LIMIT = 'firelimit';\n\n/**\n * This event is dispatched when a bullet is killed.\n *\n * @event BULLET_KILL\n *\n * @param {Bullet} bullet - The bullet that was killed\n * @param {Weapon} weapon - The weapon emitting the event\n */\nexport const BULLET_KILL = 'kill';\n\nexport default {\n  WEAPON_FIRE,\n  WEAPON_FIRE_LIMIT,\n  BULLET_KILL,\n};\n","import consts from './consts';\nimport type Weapon from './Weapon';\n\n/**\n * Log text to the console or throw an error\n * @param text - Text to be logged\n * @param logLevel - The log level, either `warn`, `error' or `off`\n */\nfunction log(text: string, logLevel: 'warn' | 'error' | 'off'): void {\n  if (logLevel === 'warn') {\n    /* eslint-disable-next-line no-console */\n    console.warn(text);\n  } else if (logLevel === 'error') {\n    throw new Error(text);\n  }\n}\n\n/**\n * Check the config of the weapon for common errors and weird configurations.\n * @param weapon - The weapon being validated\n * @param property - The property of the weapon being validated\n */\nfunction validateConfig(\n  weapon: Weapon,\n  property: keyof Weapon | 'all' = 'all'\n): void {\n  if (\n    (['bulletWorldWrap', 'bulletKillType'].includes(property) ||\n      property === 'all') &&\n    weapon.bulletWorldWrap &&\n    (weapon.bulletKillType === consts.KillType.KILL_WORLD_BOUNDS ||\n      weapon.bulletKillType === consts.KillType.KILL_WEAPON_BOUNDS)\n  ) {\n    log(\n      'Warning: KILL_WORLD_BOUNDS and KILL_WEAPON_BOUNDS does not work well with bulletWorldWrap set to true.',\n      weapon.logLevel\n    );\n  }\n  if (\n    (['bulletKillType', 'bulletLifespan'].includes(property) ||\n      property === 'all') &&\n    weapon.bulletKillType === consts.KillType.KILL_LIFESPAN &&\n    weapon.bulletLifespan < 0\n  ) {\n    log(\n      'Invalid bulletLifespan; must be > 0; currently ' + weapon.bulletLifespan,\n      weapon.logLevel\n    );\n  }\n  if (\n    (['trackRotation', 'trackedSprite'].includes(property) ||\n      property === 'all') &&\n    weapon.trackRotation === true &&\n    (weapon.trackedSprite?.rotation === undefined ||\n      weapon.trackedSprite.angle === undefined)\n  ) {\n    log(\n      'Warning: Weapon cannot track rotation of an object without a rotation and/or angle property.',\n      weapon.logLevel\n    );\n  }\n  if (\n    (['bulletInheritSpriteSpeed', 'trackedSprite'].includes(property) ||\n      property === 'all') &&\n    weapon.bulletInheritSpriteSpeed === true &&\n    !weapon.trackedSprite?.body\n  ) {\n    log(\n      'Warning: Bullet cannot inherit speed from a sprite without a body.',\n      weapon.logLevel\n    );\n  }\n  const shouldBePositive: (keyof Weapon)[] = [\n    'fireLimit',\n    'fireRate',\n    'fireRateVariance',\n    'bulletAngleVariance',\n    'bulletSpeedVariance',\n    'bulletKillDistance',\n  ];\n  /* eslint-disable @typescript-eslint/no-non-null-assertion */\n  if (property === 'all') {\n    shouldBePositive.forEach(key => {\n      if (weapon[key] !== undefined && weapon[key]! < 0) {\n        log(\n          'Invalid ' + property + '; must be >= 0; currently ' + weapon[key],\n          weapon.logLevel\n        );\n      }\n    });\n  } else if (\n    shouldBePositive.includes(property) &&\n    weapon[property] !== undefined &&\n    weapon[property]! < 0\n  ) {\n    log(\n      'Invalid ' + property + '; must be >= 0; currently ' + weapon[property],\n      weapon.logLevel\n    );\n  }\n}\n\nexport { log };\nexport default validateConfig;\n","/**\n * @author       Patrick Sletvold\n * @author       jdotr <https://github.com/jdotrjs>\n * @author       Richard Davey\n * @license      {@link https://github.com/16patsle/phaser3-weapon-plugin/blob/master/LICENSE|MIT License}\n */\nimport Weapon from './Weapon';\n\ntype WeaponConfig = {\n  /**\n   * The quantity of bullets to seed the Weapon with. If -1 it will set the pool to automatically expand.\n   */\n  bulletLimit?: number;\n\n  /**\n   * The Game.cache key of the image that this Sprite will use.\n   */\n  key?: string;\n\n  /**\n   * If the Sprite image contains multiple frames you can specify which one to use here.\n   */\n  frame?: string;\n\n  /**\n   * Optional Group to add the object to. If not specified it will be added to the World group.\n   */\n  group?: Phaser.GameObjects.Group;\n\n  /**\n   * Optional custom class for the Weapon.\n   */\n  weaponClass?: typeof Weapon;\n};\n\n/**\n * The Weapon Plugin provides the ability to easily create a bullet pool\n * and manager.\n *\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\n * not currently work with Impact or Matter Physics.\n *\n * The Bullets are created inside of {@link Weapon.bullets weapon.bullets}, which is\n * a {@link https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Group.html Group} instance. Anything you can usually do\n * with a Group, like iterate it, etc can be done to the bullets Group too.\n *\n * Bullets can have textures and even animations. You can control the speed at\n * which they are fired, the firing rate, the firing angle, and even set things\n * like gravity for them.\n *\n * A small example, using add.weapon, assumed to be running from within a\n * {@link https://photonstorm.github.io/phaser3-docs/Phaser.Types.Scenes.html#.SceneCreateCallback Phaser.Scene.create} method:\n *\n * ```javascript\n * var weapon = this.add.weapon(10, 'bullet');\n * weapon.fireFrom.setPosition(300, 300);\n * this.input.on(Phaser.Input.Events.POINTER_DOWN, weapon.fire, this);\n * ```\n */\nclass WeaponPlugin extends Phaser.Plugins.ScenePlugin {\n  weapons: Weapon[];\n\n  /**\n   * @param scene - A reference to the {@link https://photonstorm.github.io/phaser3-docs/Phaser.Scene.html Phaser.Scene} instance.\n   * @param pluginManager - A reference to the\n   *  {@link https://photonstorm.github.io/phaser3-docs/Phaser.Plugins.PluginManager.html PluginManager} instance.\n   */\n  constructor(\n    scene: Phaser.Scene,\n    pluginManager: Phaser.Plugins.PluginManager\n  ) {\n    super(scene, pluginManager);\n\n    this.weapons = [];\n\n    // Register our new Game Object type\n    pluginManager.registerGameObject(\n      'weapon',\n      this.add.bind(this),\n      (config: WeaponConfig) => {\n        return this.add(\n          config.bulletLimit,\n          config.key,\n          config.frame,\n          config.group,\n          config.weaponClass\n        );\n      }\n    );\n  }\n\n  /**\n   *\n   * @param bulletLimit - The quantity of bullets to seed the Weapon with. If -1 it will set the pool to automatically expand.\n   * @param key - The Game.cache key of the image that this Sprite will use.\n   * @param frame - If the Sprite image contains multiple frames you can specify which one to use here.\n   * @param group - Optional Group to add the object to.\n   * @param weaponClass - Optional custom class for the Weapon.\n   * @returns The weapon that was created\n   */\n  add(\n    bulletLimit?: number,\n    key?: string,\n    frame?: string,\n    group?: Phaser.GameObjects.Group,\n    weaponClass: typeof Weapon = Weapon\n  ): Weapon {\n    const weapon = new weaponClass(this.scene, bulletLimit, key, frame, group);\n\n    this.weapons.push(weapon);\n\n    return weapon;\n  }\n\n  /**\n   * Called by the PluginManager when this plugin is started.\n   * If a plugin is stopped, and then started again, this will get called again.\n   * Typically called immediately after `BasePlugin.init`.\n   */\n  start(): void {\n    this.systems.events.on(\n      Phaser.Core.Events.POST_RENDER,\n      this.postRender,\n      this\n    );\n  }\n\n  /**\n   * If this is a Scene Plugin (i.e. installed into a Scene) then this method is called when the Scene boots.\n   * By this point the plugin properties `scene` and `systems` will have already been set.\n   * In here you can listen for Scene events and set-up whatever you need for this plugin to run.\n   */\n  boot(): void {\n    const eventEmitter = this.systems.events;\n\n    eventEmitter.on(Phaser.Scenes.Events.UPDATE, this.update, this);\n    eventEmitter.on(Phaser.Core.Events.DESTROY, this.destroy, this);\n  }\n\n  /**\n   * Internal update method, called by the PluginManager.\n   */\n  protected update(): void {\n    this.weapons.forEach(weapon => {\n      weapon.update();\n    });\n  }\n\n  /**\n   * Internal update method, called by the PluginManager.\n   */\n  protected postRender(): void {\n    this.weapons.forEach(weapon => {\n      weapon.postRender();\n    });\n  }\n\n  /**\n   * Destroys this Weapon.\n   * You must release everything in here, all references, all objects, free it all up.\n   */\n  destroy(): void {\n    super.destroy();\n\n    this.weapons.forEach(weapon => {\n      weapon.destroy();\n    });\n  }\n}\n\nexport default WeaponPlugin;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(0);\n"],"sourceRoot":""}