{"version":3,"sources":["webpack://WeaponPlugin/webpack/universalModuleDefinition","webpack://WeaponPlugin/./Weapon.ts","webpack://WeaponPlugin/./Bullet.ts","webpack://WeaponPlugin/./consts.ts","webpack://WeaponPlugin/./events.ts","webpack://WeaponPlugin/./validateConfig.ts","webpack://WeaponPlugin/./WeaponPlugin.ts","webpack://WeaponPlugin/webpack/bootstrap","webpack://WeaponPlugin/webpack/startup","webpack://WeaponPlugin/webpack/runtime/define property getters","webpack://WeaponPlugin/webpack/runtime/hasOwnProperty shorthand","webpack://WeaponPlugin/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","globalThis","Weapon","Phaser","Events","EventEmitter","constructor","scene","bulletLimit","key","frame","group","super","debugPhysics","_bullets","_autoExpandBulletsGroup","_autofire","_shots","_fireLimit","_fireRate","_fireRateVariance","_fireFrom","Geom","Rectangle","_fireAngle","Angle","_bulletInheritSpriteSpeed","_bulletAnimation","_bulletFrameRandom","_bulletFrameCycle","_bulletWorldWrap","_bulletWorldWrapPadding","_bulletAngleOffset","_bulletAngleVariance","_bulletSpeed","_bulletSpeedVariance","_bulletLifespan","_bulletKillDistance","_bulletGravity","Math","Vector2","_bulletRotateToVelocity","_bulletKey","_bulletFrame","_bulletClass","Bullet","_bulletCollideWorldBounds","_bulletKillType","KillType","_data","customBody","width","height","offsetX","offsetY","_bounds","_bulletBounds","_bulletFrames","_bulletFrameIndex","anims","_trackedSprite","_trackedPointer","_multiFire","_hasFired","_trackRotation","_trackOffset","_nextFire","_tempNextFire","_rotatedPoint","logLevel","this","physics","world","bounds","validateConfig","createBullets","value","classType","bullets","children","each","child","body","collideWorldBounds","setData","type","bulletBounds","sys","cameras","main","getBounds","fireFrom","x","y","quantity","bulletClass","add","maxSize","runChildUpdate","autoExpandBulletsGroup","createMultiple","repeat","active","visible","bulletKey","bulletFrame","addMultiple","entries","forEach","callback","callbackContext","args","call","pauseAll","enable","timeEvent","getData","undefined","paused","resumeAll","killAll","kill","resetShots","newLimit","shots","fireLimit","trackSprite","sprite","trackRotation","trackedPointer","trackedSprite","trackOffset","set","trackPointer","pointer","input","activePointer","fireMany","positions","from","multiFire","offset","bullet","fire","push","position","fireOffset","fireAtPointer","fireAtSprite","fireAtXY","time","now","speed","bulletSpeed","bulletSpeedVariance","Between","updateFireFrom","rotation","RotateAround","bulletInheritSpriteSpeed","fromX","random","fromY","angle","fireAngle","RadToDeg","atan2","bulletAngleVariance","moveX","moveY","cos","DegToRad","sin","getFirstDead","prepare","killType","bulletKillType","killDistance","bulletKillDistance","rotateToVelocity","bulletRotateToVelocity","addEvent","delay","bulletLifespan","callbackScope","lifespan","bulletAngleOffset","bulletAnimation","play","bulletFrameCycle","bulletFrameIndex","bulletFrames","length","setTexture","bulletFrameRandom","nextFrame","floor","setSize","setOffset","bulletCollideWorldBounds","setVelocity","setGravity","bulletGravity","next","rate","fireRate","fireRateVariance","emit","WEAPON_FIRE","WEAPON_FIRE_LIMIT","CenterOn","setBulletBodyOffset","setBulletFrames","min","max","selectionMethod","FrameType","log","Utils","Array","NumberArray","addBulletAnimation","name","frames","frameRate","exists","create","get","update","autofire","postRender","destroy","bulletID","GameObjects","Sprite","existing","setDataEnabled","bulletManager","bodyDirty","bodyBounds","data","setActive","setVisible","reset","debugShowBody","debugShowVelocity","stop","BULLET_KILL","distance","Intersects","RectangleToRectangle","velocity","bulletWorldWrap","wrap","bulletWorldWrapPadding","text","console","warn","Error","weapon","property","includes","consts","shouldBePositive","WeaponPlugin","Plugins","ScenePlugin","pluginManager","weapons","registerGameObject","bind","config","weaponClass","start","systems","events","on","Core","POST_RENDER","boot","eventEmitter","Scenes","UPDATE","DESTROY","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","o","Object","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","r","Symbol","toStringTag"],"mappings":"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","file":"WeaponPlugin.modern.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WeaponPlugin\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WeaponPlugin\"] = factory();\n\telse\n\t\troot[\"WeaponPlugin\"] = factory();\n})(globalThis, function() {\nreturn ","import Bullet from './Bullet';\nimport { KillType, Angle, FrameType } from './consts';\nimport validateConfig, { log } from './validateConfig';\nimport { WEAPON_FIRE, WEAPON_FIRE_LIMIT } from './events';\n\n/**\n * Any Object, as long as it has public `x` and `y` properties,\n * such as {@link https://photonstorm.github.io/phaser3-docs/Phaser.Geom.Point.html Point}, `{ x: 0, y: 0 }`, {@link https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Sprite.html Sprite}, etc\n */\ntype ObjectWithXY = {\n  x: number;\n  y: number;\n};\n\n/**\n * An object that has x/y coords and optional rotation. Any Sprite-like object.\n */\ntype ObjectWithTransform = ObjectWithXY & {\n  rotation?: number;\n  angle?: number;\n  body?: Phaser.Physics.Arcade.Body;\n};\n\n/**\n * The Weapon provides the ability to easily create a bullet pool and manager.\n *\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\n * not currently work with Impact or Matter Physics.\n *\n * The Bullets are created inside of {@link bullets weapon.bullets}, which is\n * a {@link https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Group.html Group} instance. Anything you can usually do\n * with a Group, like iterate it, etc can be done to the bullets Group too.\n *\n * Bullets can have textures and even animations. You can control the speed at\n * which they are fired, the firing rate, the firing angle, and even set things\n * like gravity for them.\n *\n * A small example, using add.weapon, assumed to be running from within a\n * {@link https://photonstorm.github.io/phaser3-docs/Phaser.Types.Scenes.html#.SceneCreateCallback Phaser.Scene.create} method:\n *\n * ```javascript\n * var weapon = this.add.weapon(10, 'bullet');\n * weapon.fireFrom.setPosition(300, 300);\n * this.input.on(Phaser.Input.Events.POINTER_DOWN, weapon.fire, this);\n * ```\n */\nclass Weapon extends Phaser.Events.EventEmitter {\n  /**\n   * The scene the Weapon is bound to\n   */\n  scene: Phaser.Scene;\n\n  /**\n   * Should debug graphics render for physics bodies?\n   */\n  debugPhysics = false;\n\n  /**\n   * Private var that holds the public {@link bullets} property.\n   */\n  private _bullets!: Phaser.GameObjects.Group;\n\n  /**\n   * Private var that holds the public {@link autoExpandBulletsGroup} property.\n   */\n  private _autoExpandBulletsGroup = false;\n\n  /**\n   * Private var that holds the public {@link autofire} property.\n   */\n  private _autofire = false;\n\n  /**\n   * Private var that holds the public {@link shots} property.\n   */\n  private _shots = 0;\n\n  /**\n   * Private var that holds the public {@link fireLimit} property.\n   */\n  private _fireLimit = 0;\n\n  /**\n   * Private var that holds the public {@link fireRate} property.\n   */\n  private _fireRate = 100;\n\n  /**\n   * Private var that holds the public {@link fireRateVariance} property.\n   */\n  private _fireRateVariance = 0;\n\n  /**\n   * Private var that holds the public {@link fireFrom} property.\n   */\n  private _fireFrom = new Phaser.Geom.Rectangle(0, 0, 1, 1);\n\n  /**\n   * Private var that holds the public {@link fireAngle} property.\n   */\n  private _fireAngle: integer = Angle.ANGLE_UP;\n\n  /**\n   * Private var that holds the public {@link bulletInheritSpriteSpeed} property.\n   */\n  private _bulletInheritSpriteSpeed = false;\n\n  /**\n   * Private var that holds the public {@link bulletAnimation} property.\n   */\n  private _bulletAnimation = '';\n\n  /**\n   * Private var that holds the public {@link bulletFrameRandom} property.\n   */\n  private _bulletFrameRandom = false;\n\n  /**\n   * Private var that holds the public {@link bulletFrameCycle} property.\n   */\n  private _bulletFrameCycle = false;\n\n  /**\n   * Private var that holds the public {@link bulletWorldWrap} property.\n   */\n  private _bulletWorldWrap = false;\n\n  /**\n   * Private var that holds the public {@link bulletWorldWrapPadding} property.\n   */\n  private _bulletWorldWrapPadding: integer = 0;\n\n  /**\n   * Private var that holds the public {@link bulletAngleOffset} property.\n   */\n  private _bulletAngleOffset = 0;\n\n  /**\n   * Private var that holds the public {@link bulletAngleVariance} property.\n   */\n  private _bulletAngleVariance = 0;\n\n  /**\n   * Private var that holds the public {@link bulletSpeed} property.\n   */\n  private _bulletSpeed = 200;\n\n  /**\n   * Private var that holds the public {@link bulletSpeedVariance} property.\n   */\n  private _bulletSpeedVariance = 0;\n\n  /**\n   * Private var that holds the public {@link bulletLifespan} property.\n   */\n  private _bulletLifespan = 0;\n\n  /**\n   * Private var that holds the public {@link bulletKillDistance} property.\n   */\n  private _bulletKillDistance = 0;\n\n  /**\n   * Private var that holds the public {@link bulletGravity} property.\n   */\n  private _bulletGravity = new Phaser.Math.Vector2(0, 0);\n\n  /**\n   * Private var that holds the public {@link bulletRotateToVelocity} property.\n   */\n  private _bulletRotateToVelocity = false;\n\n  /**\n   * Private var that holds the public {@link bulletKey} property.\n   */\n  private _bulletKey: string;\n\n  /**\n   * Private var that holds the public {@link bulletFrame} property.\n   */\n  private _bulletFrame: string | integer;\n\n  /**\n   * Private var that holds the public {@link bulletClass} property.\n   */\n  private _bulletClass: typeof Bullet = Bullet;\n\n  /**\n   * Private var that holds the public {@link bulletCollideWorldBounds} property.\n   */\n  private _bulletCollideWorldBounds = false;\n\n  /**\n   * Private var that holds the public {@link bulletKillType} property.\n   */\n  private _bulletKillType: integer = KillType.KILL_WORLD_BOUNDS;\n\n  /**\n   * Holds internal data about custom bullet body sizes.\n   */\n  private _data: {\n    customBody: boolean;\n    width: number;\n    height: number;\n    offsetX: number;\n    offsetY: number;\n  } = {\n    customBody: false,\n    width: 0,\n    height: 0,\n    offsetX: 0,\n    offsetY: 0,\n  };\n\n  /**\n   * Private var that holds the public {@link bounds} property.\n   */\n  private _bounds = new Phaser.Geom.Rectangle();\n\n  /**\n   * Private var that holds the public {@link bulletBounds} property.\n   */\n  private _bulletBounds: Phaser.Geom.Rectangle;\n\n  /**\n   * This array stores the frames added via {@link setBulletFrames}.\n   */\n  private _bulletFrames: integer[] = [];\n\n  /**\n   * Private var that holds the public {@link bulletFrameIndex} property.\n   */\n  private _bulletFrameIndex = 0;\n\n  /**\n   * An internal object that stores the animation data added via {@link addBulletAnimation}.\n   */\n  private anims: {\n    [name: string]: Phaser.Animations.Animation;\n  } = {};\n\n  /**\n   * Private var that holds the public {@link trackedSprite} property.\n   */\n  private _trackedSprite?: Phaser.GameObjects.Sprite | ObjectWithTransform;\n\n  /**\n   * Private var that holds the public {@link trackedPointer} property.\n   */\n  private _trackedPointer?: Phaser.Input.Pointer;\n\n  /**\n   * Private var that holds the public {@link multiFire} property.\n   */\n  private _multiFire = false;\n\n  /**\n   * Internal multiFire test flag.\n   */\n  private _hasFired = false;\n\n  /**\n   * Private var that holds the public {@link trackRotation} property.\n   */\n  private _trackRotation = false;\n\n  /**\n   * Private var that holds the public {@link trackOffset} property.\n   */\n  private _trackOffset = new Phaser.Math.Vector2();\n\n  /**\n   * Internal firing rate time tracking variable.\n   */\n  private _nextFire = 0;\n\n  /**\n   * Internal firing rate time tracking variable used by multiFire.\n   */\n  private _tempNextFire = 0;\n\n  /**\n   * Internal firing rotation tracking point.\n   */\n  private _rotatedPoint = new Phaser.Math.Vector2();\n\n  /**\n   * Log level for this weapon. Either `warn`, `error' or `off`. `warn` is the default.\n   * If you change this, please do so before setting any other properties.\n   */\n  logLevel: 'warn' | 'error' | 'off' = 'warn';\n\n  /**\n   * TODO: a builder style interface would be neat. Can be kicked way forward\n   * into polishing.\n   * @param scene - A reference to the {@link https://photonstorm.github.io/phaser3-docs/Phaser.Scene.html Phaser.Scene} instance.\n   * @param bulletLimit - The quantity of bullets to seed the Weapon with. If -1 it will set the pool to automatically expand.\n   * @param key - The texture cache key of the image that this Sprite will use.\n   * @param frame - If the Sprite image contains multiple frames you can specify which one to use here.\n   * @param group - Optional Group to add the object to.\n   */\n  constructor(\n    scene: Phaser.Scene,\n    bulletLimit?: number,\n    key = '',\n    frame = '',\n    group?: Phaser.GameObjects.Group\n  ) {\n    super();\n\n    this.scene = scene;\n    this._bulletKey = key;\n    this._bulletFrame = frame;\n    this._bulletBounds = this.scene.physics.world.bounds;\n\n    validateConfig(this);\n\n    this.createBullets(bulletLimit, key, frame, group);\n  }\n\n  /**\n   * This is the {@link https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Group.html Group} that contains all of the bullets managed by this plugin.\n   */\n  get bullets(): Phaser.GameObjects.Group {\n    return this._bullets;\n  }\n  set bullets(value: Phaser.GameObjects.Group) {\n    this._bullets = value;\n\n    validateConfig(this, 'bullets');\n  }\n\n  /**\n   * Should the bullet pool run out of bullets (i.e. they are all in flight) then this\n   * boolean controls if the Group will create a brand new bullet object or not.\n   * @default false\n   */\n  get autoExpandBulletsGroup(): boolean {\n    return this._autoExpandBulletsGroup;\n  }\n  set autoExpandBulletsGroup(value: boolean) {\n    this._autoExpandBulletsGroup = value;\n\n    validateConfig(this, 'autoExpandBulletsGroup');\n  }\n\n  /**\n   * Will this weapon auto fire? If set to true then a new bullet will be fired\n   * based on the {@link fireRate} value.\n   * @default false\n   */\n  get autofire(): boolean {\n    return this._autofire;\n  }\n  set autofire(value: boolean) {\n    this._autofire = value;\n\n    validateConfig(this, 'autofire');\n  }\n\n  /**\n   * The total number of bullets this Weapon has fired so far.\n   * You can limit the number of shots allowed (via {@link fireLimit}), and reset\n   * this total via {@link resetShots}.\n   * @default 0\n   */\n  get shots(): number {\n    return this._shots;\n  }\n  set shots(value: number) {\n    this._shots = value;\n\n    validateConfig(this, 'shots');\n  }\n\n  /**\n   * The maximum number of shots that this Weapon is allowed to fire before it stops.\n   * When the limit is hit the {@link WEAPON_FIRE_LIMIT} event is dispatched.\n   * You can reset the shot counter via {@link resetShots}.\n   * @default 0\n   */\n  get fireLimit(): number {\n    return this._fireLimit;\n  }\n  set fireLimit(value: number) {\n    this._fireLimit = value;\n\n    validateConfig(this, 'fireLimit');\n  }\n\n  /**\n   * The minimum interval between shots, in milliseconds.\n   * @default 100\n   */\n  get fireRate(): number {\n    return this._fireRate;\n  }\n  set fireRate(value: number) {\n    this._fireRate = value;\n\n    validateConfig(this, 'fireRate');\n  }\n\n  /**\n   * This is a modifier that is added to the {@link fireRate} each update to add variety\n   * to the firing rate of the Weapon. The value is given in milliseconds.\n   * If you've a {@link fireRate} of 200 and a {@link fireRateVariance} of 50 then the actual\n   * firing rate of the Weapon will be between 150 and 250.\n   * @default 0\n   */\n  get fireRateVariance(): number {\n    return this._fireRateVariance;\n  }\n  set fireRateVariance(value: number) {\n    this._fireRateVariance = value;\n\n    validateConfig(this, 'fireRateVariance');\n  }\n\n  /**\n   * This is a Rectangle from within which the bullets are fired. By default it's a 1x1\n   * rectangle, the equivalent of a Point. But you can change the width and height, and if\n   * larger than 1x1 it'll pick a random point within the rectangle to launch the bullet from.\n   */\n  get fireFrom(): Phaser.Geom.Rectangle {\n    return this._fireFrom;\n  }\n  set fireFrom(value: Phaser.Geom.Rectangle) {\n    this._fireFrom = value;\n\n    validateConfig(this, 'fireFrom');\n  }\n\n  /**\n   * The angle at which the bullets are fired. This can be a const such as {@link Angle.ANGLE_UP ANGLE_UP}\n   * or it can be any number from 0 to 360 inclusive, where 0 degrees is to the right.\n   * @default {@link Angle.ANGLE_UP ANGLE_UP}\n   */\n  get fireAngle(): integer {\n    return this._fireAngle;\n  }\n  set fireAngle(value: integer) {\n    this._fireAngle = value;\n\n    validateConfig(this, 'fireAngle');\n  }\n\n  /**\n   * When a Bullet is fired it can optionally inherit the velocity of the {@link trackedSprite} if set.\n   * @default false\n   */\n  get bulletInheritSpriteSpeed(): boolean {\n    return this._bulletInheritSpriteSpeed;\n  }\n  set bulletInheritSpriteSpeed(value: boolean) {\n    this._bulletInheritSpriteSpeed = value;\n\n    validateConfig(this, 'bulletInheritSpriteSpeed');\n  }\n\n  /**\n   * The string based name of the animation that the Bullet will be given on launch.\n   * This is set via {@link addBulletAnimation}.\n   * @default ''\n   */\n  get bulletAnimation(): string {\n    return this._bulletAnimation;\n  }\n  set bulletAnimation(value: string) {\n    this._bulletAnimation = value;\n\n    validateConfig(this, 'bulletAnimation');\n  }\n\n  /**\n   * If you've added a set of frames via {@link setBulletFrames} then you can optionally\n   * chose for each Bullet fired to pick a random frame from the set.\n   * @default false\n   */\n  get bulletFrameRandom(): boolean {\n    return this._bulletFrameRandom;\n  }\n  set bulletFrameRandom(value: boolean) {\n    this._bulletFrameRandom = value;\n\n    validateConfig(this, 'bulletFrameRandom');\n  }\n\n  /**\n   * If you've added a set of frames via {@link setBulletFrames} then you can optionally\n   * chose for each Bullet fired to use the next frame in the set. The frame index is then\n   * advanced one frame until it reaches the end of the set, then it starts from the start\n   * again. Cycling frames like this allows you to create varied bullet effects via\n   * sprite sheets.\n   * @default false\n   */\n  get bulletFrameCycle(): boolean {\n    return this._bulletFrameCycle;\n  }\n  set bulletFrameCycle(value: boolean) {\n    this._bulletFrameCycle = value;\n\n    validateConfig(this, 'bulletFrameCycle');\n  }\n\n  /**\n   * Should the Bullets wrap around the world bounds? This automatically calls\n   * {@link https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.World.html#wrap World.wrap} on the Bullet each frame. See the docs for that method for details.\n   * @default false\n   */\n  get bulletWorldWrap(): boolean {\n    return this._bulletWorldWrap;\n  }\n  set bulletWorldWrap(value: boolean) {\n    this._bulletWorldWrap = value;\n\n    validateConfig(this, 'bulletWorldWrap');\n  }\n\n  /**\n   * If {@link bulletWorldWrap} is true then you can provide an optional padding value with this\n   * property. It's added to the calculations determining when the Bullet should wrap around\n   * the world or not. The value is given in pixels.\n   * @default 0\n   */\n  get bulletWorldWrapPadding(): integer {\n    return this._bulletWorldWrapPadding;\n  }\n  set bulletWorldWrapPadding(value: integer) {\n    this._bulletWorldWrapPadding = value;\n\n    validateConfig(this, 'bulletWorldWrapPadding');\n  }\n\n  /**\n   * An optional angle offset applied to the Bullets when they are launched.\n   * This is useful if for example your bullet sprites have been drawn facing up, instead of\n   * to the right, and you want to fire them at an angle. In which case you can set the\n   * angle offset to be 90 and they'll be properly rotated when fired.\n   * @default 0\n   */\n  get bulletAngleOffset(): number {\n    return this._bulletAngleOffset;\n  }\n  set bulletAngleOffset(value: number) {\n    this._bulletAngleOffset = value;\n\n    validateConfig(this, 'bulletAngleOffset');\n  }\n\n  /**\n   * This is a variance added to the angle of Bullets when they are fired.\n   * If you fire from an angle of 90 and have a {@link bulletAngleVariance} of 20 then the actual\n   * angle of the Bullets will be between 70 and 110 degrees. This is a quick way to add a\n   * great 'spread' effect to a Weapon.\n   * @default 0\n   */\n  get bulletAngleVariance(): number {\n    return this._bulletAngleVariance;\n  }\n  set bulletAngleVariance(value: number) {\n    this._bulletAngleVariance = value;\n\n    validateConfig(this, 'bulletAngleVariance');\n  }\n\n  /**\n   * The initial velocity of fired bullets, in pixels per second.\n   * @default 200\n   */\n  get bulletSpeed(): number {\n    return this._bulletSpeed;\n  }\n  set bulletSpeed(value: number) {\n    this._bulletSpeed = value;\n\n    validateConfig(this, 'bulletSpeed');\n  }\n\n  /**\n   * This is a variance added to the speed of Bullets when they are fired.\n   * If bullets have a {@link bulletSpeed} value of 200, and a {@link bulletSpeedVariance} of 50\n   * then the actual speed of the Bullets will be between 150 and 250 pixels per second.\n   * @default 0\n   */\n  get bulletSpeedVariance(): number {\n    return this._bulletSpeedVariance;\n  }\n  set bulletSpeedVariance(value: number) {\n    this._bulletSpeedVariance = value;\n\n    validateConfig(this, 'bulletSpeedVariance');\n  }\n\n  /**\n   * If you've set {@link bulletKillType} to {@link KillType.KILL_LIFESPAN KILL_LIFESPAN} this controls the amount\n   * of lifespan the Bullets have set on launch. The value is given in milliseconds.\n   * When a Bullet hits its lifespan limit it will be automatically killed.\n   * @default 0\n   */\n  get bulletLifespan(): number {\n    return this._bulletLifespan;\n  }\n  set bulletLifespan(value: number) {\n    this._bulletLifespan = value;\n\n    validateConfig(this, 'bulletLifespan');\n  }\n\n  /**\n   * If you've set {@link bulletKillType} to {@link KillType.KILL_DISTANCE KILL_DISTANCE} this controls the distance\n   * the Bullet can travel before it is automatically killed. The distance is given in pixels.\n   * @default 0\n   */\n  get bulletKillDistance(): number {\n    return this._bulletKillDistance;\n  }\n  set bulletKillDistance(value: number) {\n    this._bulletKillDistance = value;\n\n    validateConfig(this, 'bulletKillDistance');\n  }\n\n  /**\n   * This is the amount of {@link https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.Body.html#gravity Phaser.Physics.Arcade.Body.gravity} added to the Bullets physics body when fired.\n   * Gravity is expressed in pixels / second / second.\n   */\n  get bulletGravity(): Phaser.Math.Vector2 {\n    return this._bulletGravity;\n  }\n  set bulletGravity(value: Phaser.Math.Vector2) {\n    this._bulletGravity = value;\n\n    validateConfig(this, 'bulletGravity');\n  }\n\n  /**\n   * Bullets can optionally adjust their rotation in-flight to match their velocity.\n   * This can create the effect of a bullet 'pointing' to the path it is following, for example\n   * an arrow being fired from a bow, and works especially well when added to {@link bulletGravity}.\n   * @default false\n   */\n  get bulletRotateToVelocity(): boolean {\n    return this._bulletRotateToVelocity;\n  }\n  set bulletRotateToVelocity(value: boolean) {\n    this._bulletRotateToVelocity = value;\n\n    validateConfig(this, 'bulletRotateToVelocity');\n  }\n\n  /**\n   * The Texture Key that the Bullets use when rendering.\n   * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\n   * @default ''\n   */\n  get bulletKey(): string {\n    return this._bulletKey;\n  }\n  set bulletKey(value: string) {\n    this._bulletKey = value;\n\n    validateConfig(this, 'bulletKey');\n  }\n\n  /**\n   * The Texture Frame that the Bullets use when rendering.\n   * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\n   * @default ''\n   */\n  get bulletFrame(): string | integer {\n    return this._bulletFrame;\n  }\n  set bulletFrame(value: string | integer) {\n    this._bulletFrame = value;\n\n    validateConfig(this, 'bulletFrame');\n  }\n\n  /**\n   * The Class of the bullets that are launched by this Weapon. Defaults to {@link Bullet}, but can be\n   * overridden before calling {@link createBullets} and set to your own class type.\n   *\n   * It should be a constructor function accepting `(scene, x, y, key, frame)`.\n   * @default Bullet\n   */\n  get bulletClass(): typeof Bullet {\n    return this._bulletClass;\n  }\n  set bulletClass(classType: typeof Bullet) {\n    this._bulletClass = classType;\n\n    // `this.bullets` exists only after createBullets()\n    if (this.bullets) {\n      this.bullets.classType = this._bulletClass;\n    }\n\n    validateConfig(this, 'bulletClass');\n  }\n\n  /**\n   * Should bullets collide with the World bounds or not?\n   * @default false\n   */\n  get bulletCollideWorldBounds(): boolean {\n    return this._bulletCollideWorldBounds;\n  }\n  set bulletCollideWorldBounds(value: boolean) {\n    this._bulletCollideWorldBounds = value;\n\n    (this.bullets.children as Phaser.Structs.Set<Bullet>).each(child => {\n      child.body.collideWorldBounds = value;\n      child.setData('bodyDirty', false);\n    });\n\n    validateConfig(this, 'bulletCollideWorldBounds');\n  }\n\n  /**\n   * This controls how the bullets will be killed. The default is {@link KillType.KILL_WORLD_BOUNDS KILL_WORLD_BOUNDS}.\n   *\n   * There are 7 different \"kill types\" available:\n   *\n   * * {@linkcode KillType.KILL_NEVER KILL_NEVER}\n   * The bullets are never destroyed by the Weapon. It's up to you to destroy them via your own code.\n   *\n   * * {@linkcode KillType.KILL_LIFESPAN KILL_LIFESPAN}\n   * The bullets are automatically killed when their {@link bulletLifespan} amount expires.\n   *\n   * * {@linkcode KillType.KILL_DISTANCE KILL_DISTANCE}\n   * The bullets are automatically killed when they\n   * exceed {@link bulletKillDistance} pixels away from their original launch position.\n   *\n   * * {@linkcode KillType.KILL_WEAPON_BOUNDS KILL_WEAPON_BOUNDS}\n   * The bullets are automatically killed when they no longer intersect with the {@link bounds} rectangle.\n   *\n   * * {@linkcode KillType.KILL_CAMERA_BOUNDS KILL_CAMERA_BOUNDS}\n   * The bullets are automatically killed when they no longer intersect with the {@link https://photonstorm.github.io/phaser3-docs/Phaser.Cameras.Scene2D.Camera.html#getBounds Camera.getBounds} rectangle.\n   *\n   * * {@linkcode KillType.KILL_WORLD_BOUNDS KILL_WORLD_BOUNDS}\n   * The bullets are automatically killed when they no longer intersect with the {@link https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.World.html#bounds World.bounds} rectangle.\n   *\n   * * {@linkcode KillType.KILL_STATIC_BOUNDS KILL_STATIC_BOUNDS}\n   * The bullets are automatically killed when they no longer intersect with the {@link bounds} rectangle.\n   * The difference between static bounds and weapon bounds, is that a static bounds will never be adjusted to\n   * match the position of a tracked sprite or pointer.\n   * @default {@link KillType.KILL_WORLD_BOUNDS KILL_WORLD_BOUNDS}\n   */\n  get bulletKillType(): integer {\n    return this._bulletKillType;\n  }\n  set bulletKillType(type: integer) {\n    switch (type) {\n      case KillType.KILL_STATIC_BOUNDS:\n      case KillType.KILL_WEAPON_BOUNDS:\n        this.bulletBounds = this.bounds;\n        break;\n\n      case KillType.KILL_CAMERA_BOUNDS:\n        this.bulletBounds = this.scene.sys.cameras.main.getBounds();\n        break;\n\n      case KillType.KILL_WORLD_BOUNDS:\n        this.bulletBounds = this.scene.physics.world.bounds;\n        break;\n    }\n\n    this._bulletKillType = type;\n\n    validateConfig(this, 'bulletKillType');\n  }\n\n  /**\n   * This Rectangle defines the bounds that are used when determining if a Bullet should be killed or not.\n   * It's used in combination with {@link bulletKillType} when that is set to either {@link KillType.KILL_WEAPON_BOUNDS KILL_WEAPON_BOUNDS}\n   * or {@link KillType.KILL_STATIC_BOUNDS KILL_STATIC_BOUNDS}. If you are not using either of these kill types then the bounds are ignored.\n   * If you are tracking a Sprite or Point then the bounds are centered on that object every frame.\n   */\n  get bounds(): Phaser.Geom.Rectangle {\n    return this._bounds;\n  }\n  set bounds(value: Phaser.Geom.Rectangle) {\n    this._bounds = value;\n\n    validateConfig(this, 'bounds');\n  }\n\n  /**\n   * The Rectangle used to calculate the bullet bounds from.\n   */\n  get bulletBounds(): Phaser.Geom.Rectangle {\n    return this._bulletBounds;\n  }\n  set bulletBounds(value: Phaser.Geom.Rectangle) {\n    this._bulletBounds = value;\n\n    validateConfig(this, 'bulletBounds');\n  }\n\n  /**\n   * This array stores the frames added via {@link setBulletFrames}.\n   */\n  get bulletFrames(): integer[] {\n    return this._bulletFrames;\n  }\n  set bulletFrames(value: integer[]) {\n    this._bulletFrames = value;\n\n    validateConfig(this, 'bulletFrames');\n  }\n\n  /**\n   * The index of the frame within {@link bulletFrames} that is currently being used.\n   * This value is only used if {@link bulletFrameCycle} is set to `true`.\n   */\n  get bulletFrameIndex(): number {\n    return this._bulletFrameIndex;\n  }\n  set bulletFrameIndex(value: number) {\n    this._bulletFrameIndex = value;\n\n    validateConfig(this, 'bulletFrameIndex');\n  }\n\n  /**\n   * The Sprite currently being tracked by the Weapon, if any.\n   * This is set via the {@link trackSprite} method.\n   */\n  get trackedSprite():\n    | Phaser.GameObjects.Sprite\n    | ObjectWithTransform\n    | undefined {\n    return this._trackedSprite;\n  }\n  set trackedSprite(\n    value: Phaser.GameObjects.Sprite | ObjectWithTransform | undefined\n  ) {\n    this._trackedSprite = value;\n\n    validateConfig(this, 'trackedSprite');\n  }\n\n  /**\n   * The Pointer currently being tracked by the Weapon, if any.\n   * This is set via the {@link trackPointer} method.\n   */\n  get trackedPointer(): Phaser.Input.Pointer | undefined {\n    return this._trackedPointer;\n  }\n  set trackedPointer(value: Phaser.Input.Pointer | undefined) {\n    this._trackedPointer = value;\n\n    validateConfig(this, 'trackedPointer');\n  }\n\n  /**\n   * If you want this Weapon to be able to fire more than 1 bullet in a single\n   * update, then set this property to `true`. When `true` the Weapon plugin won't\n   * set the shot / firing timers until the {@link postRender} phase of the game loop.\n   * This means you can call {@link fire} (and similar methods) as often as you like in one\n   * single game update.\n   * @default false\n   */\n  get multiFire(): boolean {\n    return this._multiFire;\n  }\n  set multiFire(value: boolean) {\n    this._multiFire = value;\n\n    validateConfig(this, 'multiFire');\n  }\n\n  /**\n   * If the Weapon is tracking a Sprite, should it also track the Sprites rotation?\n   * This is useful for a game such as Asteroids, where you want the weapon to fire based\n   * on the sprites rotation.\n   * @default false\n   */\n  get trackRotation(): boolean {\n    return this._trackRotation;\n  }\n  set trackRotation(value: boolean) {\n    this._trackRotation = value;\n\n    validateConfig(this, 'trackRotation');\n  }\n\n  /**\n   * The Track Offset is a Vector2 object that allows you to specify a pixel offset that bullets use\n   * when launching from a tracked Sprite or Pointer. For example if you've got a bullet that is 2x2 pixels\n   * in size, but you're tracking a Sprite that is 32x32, then you can set `trackOffset.x = 16` to have\n   * the bullet launched from the center of the Sprite.\n   */\n  get trackOffset(): Phaser.Math.Vector2 {\n    return this._trackOffset;\n  }\n  set trackOffset(value: Phaser.Math.Vector2) {\n    this._trackOffset = value;\n\n    validateConfig(this, 'trackOffset');\n  }\n\n  /**\n   * The x coordinate from which bullets are fired. This is the same as {@link Weapon.fireFrom}.x, and\n   * can be overridden by the {@link fire} arguments.\n   */\n  get x(): number {\n    return this.fireFrom.x;\n  }\n  set x(value: number) {\n    this.fireFrom.x = value;\n  }\n\n  /**\n   * The y coordinate from which bullets are fired. This is the same as {@link Weapon.fireFrom}.y, and\n   * can be overridden by the {@link fire} arguments.\n   */\n  get y(): number {\n    return this.fireFrom.y;\n  }\n  set y(value: number) {\n    this.fireFrom.y = value;\n  }\n\n  /**\n   * This method performs two actions: First it will check to see if the\n   * {@link bullets} Group exists or not, and if not it creates it, adding its\n   * children to the `group` given as the 4th argument.\n   *\n   * Then it will seed the bullet pool with the `quantity` number of Bullets,\n   * using the texture key and frame provided (if any).\n   *\n   * If for example you set the quantity to be 10, then this Weapon will only\n   * ever be able to have 10 bullets in-flight simultaneously. If you try to\n   * fire an 11th bullet then nothing will happen until one, or more, of the\n   * in-flight bullets have been killed, freeing them up for use by the Weapon\n   * again.\n   *\n   * If you do not wish to have a limit set, then pass in -1 as the quantity.\n   * In this instance the Weapon will keep increasing the size of the bullet\n   * pool as needed. It will never reduce the size of the pool however, so be\n   * careful it doesn't grow too large.\n   *\n   * You can either set the texture key and frame here, or via the\n   * {@link bulletKey} and {@link bulletFrame} properties. You can also\n   * animate bullets, or set them to use random frames. All Bullets belonging\n   * to a single Weapon instance must share the same texture key however.\n   *\n   * @param quantity - The quantity of bullets to seed the Weapon\n   *  with. If -1 it will set the pool to automatically expand.\n   * @param key - The texture cache key of the image that this\n   *  Sprite will use.\n   * @param frame - If the Sprite image contains multiple\n   *  frames you can specify which one to use here.\n   * @param group - Optional Group to add the object to.\n   * @return This Weapon instance.\n   */\n  createBullets(\n    quantity: integer = 1,\n    key?: string,\n    frame?: integer | string,\n    group?: Phaser.GameObjects.Group,\n    bulletClass?: typeof Bullet\n  ): this {\n    if (bulletClass) {\n      this._bulletClass = bulletClass;\n    }\n\n    if (!this.bullets || !this.bullets.scene) {\n      this.bullets = this.scene.add.group({\n        classType: this._bulletClass,\n        maxSize: quantity,\n        runChildUpdate: true,\n      });\n    }\n\n    if (quantity !== 0) {\n      if (quantity === -1) {\n        this.autoExpandBulletsGroup = true;\n        quantity = 1;\n      }\n\n      this.bullets.createMultiple({\n        key,\n        frame,\n        repeat: quantity,\n        active: false,\n        visible: false,\n      });\n\n      (this.bullets.children as Phaser.Structs.Set<Bullet>).each(child => {\n        child.setData('bulletManager', this);\n      });\n\n      if (typeof key === 'string') {\n        this.bulletKey = key;\n      }\n\n      if (typeof frame === 'string') {\n        this.bulletFrame;\n      }\n\n      if (group) {\n        group.addMultiple(this.bullets.children.entries);\n      }\n    }\n\n    return this;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * Call a function on each in-flight bullet in this Weapon.\n   *\n   * See {@link https://photonstorm.github.io/phaser3-docs/Phaser.Structs.Set.html#each Set.each} for more details.\n   *\n   * @param callback - The function that will be called for each applicable child.\n   * The child will be passed as the first argument.\n   * @param callbackContext - The context in which the function should be called (usually 'this').\n   * @param args - Additional arguments to pass to the callback function, after the child item.\n   * @return This Weapon instance.\n   */\n  forEach(\n    callback: (\n      child: Phaser.GameObjects.GameObject,\n      ...args: unknown[]\n    ) => void,\n    callbackContext: unknown,\n    ...args: unknown[]\n  ): this {\n    this.bullets.children.each(child => {\n      if (child.active) {\n        callback.call(callbackContext, child, args);\n      }\n    });\n\n    return this;\n  }\n  /* eslint-enable no-unused-vars */\n\n  /**\n   * Sets {@link https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.Body.html#enable Body.enable} to `false` on each bullet in this Weapon.\n   * This has the effect of stopping them in-flight should they be moving.\n   * It also stops them being able to be checked for collision.\n   *\n   * @return This Weapon instance.\n   */\n  pauseAll(): this {\n    (this.bullets.children as Phaser.Structs.Set<Bullet>).each(child => {\n      child.body.enable = false;\n      const timeEvent = child.getData('timeEvent');\n      if (timeEvent !== undefined) {\n        timeEvent.paused = true;\n      }\n    }, this);\n\n    return this;\n  }\n\n  /**\n   * Sets {@link https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.Body.html#enable Body.enable} to `true` on each bullet in this Weapon.\n   * This has the effect of resuming their motion should they be in-flight.\n   * It also enables them for collision checks again.\n   *\n   * @return This Weapon instance.\n   */\n  resumeAll(): this {\n    (this.bullets.children as Phaser.Structs.Set<Bullet>).each(child => {\n      child.body.enable = true;\n      const timeEvent = child.getData('timeEvent');\n      if (timeEvent !== undefined) {\n        timeEvent.paused = false;\n      }\n    }, this);\n\n    return this;\n  }\n\n  /**\n   * Calls {@link Bullet.kill} on every in-flight bullet in this Weapon.\n   * Also re-enables their physics bodies, should they have been disabled via {@link pauseAll}.\n   *\n   * @return This Weapon instance.\n   */\n  killAll(): this {\n    (this.bullets.children as Phaser.Structs.Set<Bullet>).each(child => {\n      if (child.active) {\n        child.kill();\n      }\n      child.body.enable = true;\n    });\n\n    return this;\n  }\n\n  /**\n   * Resets the {@link shots} counter back to zero. This is used when you've set\n   * {@link fireLimit} and have hit (or just wish to reset) your limit.\n   *\n   * @param newLimit - Optionally set a new {@link fireLimit}.\n   * @return This Weapon instance.\n   */\n  resetShots(newLimit?: integer): this {\n    this.shots = 0;\n\n    if (newLimit !== undefined) {\n      this.fireLimit = newLimit;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets this Weapon to track the given Sprite, or any {@link ObjectWithTransform Object with x/y coords and optionally rotation}\n   * When a Weapon tracks a Sprite it will automatically update its {@link fireFrom} value to match the\n   * Sprite's position within the Game World, adjusting the coordinates based on the offset arguments.\n   *\n   * This allows you to lock a Weapon to a Sprite, so that bullets are always launched from its location.\n   *\n   * Calling {@link trackSprite} will reset {@link trackedPointer} to undefined, should it have been set, as you can\n   * only track _either_ a Sprite, or a Pointer, at once, but not both.\n   *\n   * @param sprite - The Sprite to track the position of.\n   * @param offsetX - The horizontal offset from the Sprites position to be applied to the Weapon.\n   * @param offsetY - The vertical offset from the Sprites position to be applied to the Weapon.\n   * @param trackRotation - Should the Weapon also track the Sprites rotation?\n   * @return This Weapon instance.\n   */\n  trackSprite(\n    sprite: Phaser.GameObjects.Sprite | ObjectWithTransform,\n    offsetX: integer = 0,\n    offsetY: integer = 0,\n    trackRotation = false\n  ): this {\n    this.trackedPointer = undefined;\n    this.trackedSprite = sprite;\n    this.trackRotation = trackRotation;\n\n    this.trackOffset.set(offsetX, offsetY);\n\n    return this;\n  }\n\n  /**\n   * Sets this Weapon to track the given Pointer.\n   * When a Weapon tracks a Pointer it will automatically update its {@link fireFrom} value to match the Pointer's\n   * position within the Game World, adjusting the coordinates based on the offset arguments.\n   *\n   * This allows you to lock a Weapon to a Pointer, so that bullets are always launched from its location.\n   *\n   * Calling {@link trackPointer} will reset {@link trackedSprite} to undefined, should it have been set, as you can\n   * only track _either_ a Pointer, or a Sprite, at once, but not both.\n   *\n   * @param pointer - The Pointer to track the position of.\n   * Defaults to {@link https://photonstorm.github.io/phaser3-docs/Phaser.Input.InputPlugin.html#activePointer InputPlugin.activePointer} if not specified.\n   * @param offsetX - The horizontal offset from the Pointers position to be applied to the Weapon.\n   * @param offsetY - The vertical offset from the Pointers position to be applied to the Weapon.\n   * @return This Weapon instance.\n   */\n  trackPointer(\n    pointer?: Phaser.Input.Pointer,\n    offsetX: integer = 0,\n    offsetY: integer = 0\n  ): this {\n    if (pointer === undefined && this.scene.input) {\n      pointer = this.scene.input.activePointer;\n    }\n\n    this.trackedPointer = pointer;\n    this.trackedSprite = undefined;\n    this.trackRotation = false;\n\n    this.trackOffset.set(offsetX, offsetY);\n\n    return this;\n  }\n\n  /**\n   * Attempts to fire multiple bullets from the positions defined in the given array.\n   *\n   * If you provide a `from` argument, or if there is a tracked Sprite or Pointer, then\n   * the positions are treated as __offsets__ from the given objects position.\n   *\n   * If `from` is undefined, and there is no tracked object, then the bullets are fired\n   * from the given positions, as they exist in the world.\n   *\n   * Calling this method sets {@link multiFire} to `true`.\n   *\n   * If there are not enough bullets available in the pool, and the pool cannot be extended,\n   * then this method may not fire from all of the given positions.\n   *\n   * When the bullets are launched they have their texture and frame updated, as required.\n   * The velocity of the bullets are calculated based on Weapon properties like {@link bulletSpeed}.\n   *\n   * @param positions - An array of positions. Each position can be any Object, as long as it\n   * has public `x` and `y` properties, such as {@link https://photonstorm.github.io/phaser3-docs/Phaser.Geom.Point.html Point}, { x: 0, y: 0 }, {@link https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Sprite.html Sprite}\n   * @param from Optionally fires the bullets **from** the {@link x} and {@link y} properties of this object,\n   * _instead_ of any {@link trackedSprite} or {@link trackedPointer} that is set.\n   * @return An array containing all of the fired Bullet objects,\n   * if a launch was successful, otherwise an empty array.\n   */\n  fireMany(\n    positions: ObjectWithXY[],\n    from: Phaser.GameObjects.Sprite | Phaser.Math.Vector2 | ObjectWithTransform\n  ): Bullet[] {\n    this.multiFire = true;\n\n    const bullets: Bullet[] = [];\n\n    if (from || this.trackedSprite || this.trackedPointer) {\n      positions.forEach(offset => {\n        const bullet = this.fire(from, null, null, offset.x, offset.y);\n        if (bullet) {\n          bullets.push(bullet);\n        }\n      });\n    } else {\n      positions.forEach(position => {\n        const bullet = this.fire(position);\n        if (bullet) {\n          bullets.push(bullet);\n        }\n      });\n    }\n\n    return bullets;\n  }\n\n  /**\n   * Attempts to fire a single Bullet from a tracked Sprite or Pointer, but applies an offset\n   * to the position first. This is the same as calling {@link fire} and passing in the offset arguments.\n   *\n   * If there are no more bullets available in the pool, and the pool cannot be extended,\n   * then this method returns `undefined`. It will also return `undefined` if not enough time has expired since the last time\n   * the Weapon was fired, as defined in the {@link fireRate} property.\n   *\n   * Otherwise the first available bullet is selected, launched, and returned.\n   *\n   * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\n   * calculated based on Weapon properties like {@link bulletSpeed}.\n   *\n   * If you wish to fire multiple bullets in a single game update, then set {@link multiFire} to `true`\n   * and you can call this method as many times as you like, per loop. See also {@link fireMany}.\n   *\n   * @param offsetX - The horizontal offset from the position of the tracked Sprite or Pointer,\n   * as set with {@link trackSprite}.\n   * @param offsetY - The vertical offset from the position of the tracked Sprite or Pointer,\n   * as set with {@link trackSprite}.\n   * @return The fired bullet, if a launch was successful, otherwise `undefined`.\n   */\n  fireOffset(offsetX = 0, offsetY = 0): Bullet | undefined {\n    return this.fire(null, null, null, offsetX, offsetY);\n  }\n\n  /**\n   * Fires a bullet **at** the given Pointer. The bullet will be launched from the {@link fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param pointer - The Pointer to fire the bullet towards.\n   * @return The fired bullet if successful, undefined otherwise.\n   */\n  fireAtPointer(pointer?: Phaser.Input.Pointer): Bullet | undefined {\n    if (pointer === undefined && this.scene.input) {\n      pointer = this.scene.input.activePointer;\n    }\n\n    return this.fire(null, pointer?.x, pointer?.y);\n  }\n\n  /**\n   * Fires a bullet **at** the given Sprite. The bullet will be launched from the {@link fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param sprite - The Sprite to fire the bullet towards.\n   * @return The fired bullet if successful, undefined otherwise.\n   */\n  fireAtSprite(sprite?: Phaser.GameObjects.Sprite): Bullet | undefined {\n    return this.fire(null, sprite?.x, sprite?.y);\n  }\n\n  /**\n   * Fires a bullet **at** the given coordinates. The bullet will be launched from the {@link fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param x - The x coordinate, in world space, to fire the bullet towards.\n   * @param y - The y coordinate, in world space, to fire the bullet towards.\n   * @return The fired bullet if successful, undefined otherwise.\n   */\n  fireAtXY(x?: number, y?: number): Bullet | undefined {\n    return this.fire(null, x, y);\n  }\n\n  /**\n   * Attempts to fire a single Bullet. If there are no more bullets available in the pool,\n   * and the pool cannot be extended, then this method returns `undefined`. It will also return `undefined`\n   * if not enough time has expired since the last time the Weapon was fired,\n   * as defined in the {@link fireRate} property.\n   *\n   * Otherwise the first available bullet is selected, launched, and returned.\n   *\n   * The arguments are all optional, but allow you to control both where the bullet is launched from, and aimed at.\n   *\n   * If you don't provide any of the arguments then it uses those set via properties such as {@link trackedSprite},\n   * {@link fireAngle} and so on.\n   *\n   * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\n   * calculated based on Weapon properties like {@link bulletSpeed}.\n   *\n   * If you wish to fire multiple bullets in a single game update, then set `Weapon.multiFire = true`\n   * and you can call {@link fire} as many times as you like, per loop. Multiple fires in a single update\n   * only counts once towards the {@link shots} total, but you will still receive an event for each bullet.\n   *\n   * @param from Optionally fires the bullet **from** the {@link x} and {@link y} properties of this object.\n   * If set this overrides {@link trackedSprite} or {@link trackedPointer}. Pass `null` to ignore it.\n   * @param x - The x coordinate, in world space, to fire the bullet **towards**.\n   * If left as `undefined`, or `null`, the bullet direction is based on its angle.\n   * @param y - The y coordinate, in world space, to fire the bullet **towards**.\n   * If left as `undefined`, or `null`, the bullet direction is based on its angle.\n   * @param offsetX - If the bullet is fired from a tracked Sprite or Pointer,\n   * or the `from` argument is set, this applies a horizontal offset from the launch position.\n   * @param offsetY - If the bullet is fired from a tracked Sprite or Pointer,\n   * or the `from` argument is set, this applies a vertical offset from the launch position.\n   * @return The fired bullet, if a launch was successful, otherwise `undefined`.\n   */\n  fire(\n    from?:\n      | Phaser.GameObjects.Sprite\n      | Phaser.Math.Vector2\n      | ObjectWithTransform\n      | null,\n    x?: number | null,\n    y?: number | null,\n    offsetX = 0,\n    offsetY = 0\n  ): Bullet | undefined {\n    if (\n      this.scene.time.now < this._nextFire ||\n      (this.fireLimit > 0 && this.shots === this.fireLimit)\n    ) {\n      return undefined;\n    }\n\n    let speed = this.bulletSpeed;\n\n    //  Apply +- speed variance\n    if (this.bulletSpeedVariance !== 0) {\n      speed += Phaser.Math.Between(\n        -this.bulletSpeedVariance,\n        this.bulletSpeedVariance\n      );\n    }\n\n    // Position the fireFrom rectangle\n    if (from) {\n      // Fire based on passed coordinates\n      this.updateFireFrom(from.x, from.y);\n    } else if (\n      this.trackedSprite &&\n      typeof this.trackedSprite.rotation === 'number'\n    ) {\n      // Fire based on tracked sprite\n      if (this.trackRotation) {\n        this._rotatedPoint.set(\n          this.trackedSprite.x + this.trackOffset.x,\n          this.trackedSprite.y + this.trackOffset.y\n        );\n        Phaser.Math.RotateAround(\n          this._rotatedPoint,\n          this.trackedSprite.x,\n          this.trackedSprite.y,\n          this.trackedSprite.rotation\n        );\n\n        this.updateFireFrom(this._rotatedPoint.x, this._rotatedPoint.y);\n      } else {\n        this.updateFireFrom(this.trackedSprite.x, this.trackedSprite.y);\n      }\n\n      if (this.bulletInheritSpriteSpeed && this.trackedSprite.body) {\n        speed += (this.trackedSprite.body as Phaser.Physics.Arcade.Body).speed;\n      }\n    } else if (this.trackedPointer) {\n      // Fire based on tracked pointer\n      this.updateFireFrom(this.trackedPointer.x, this.trackedPointer.y);\n    }\n\n    // Take offset into account\n    this.fireFrom.x += offsetX;\n    this.fireFrom.y += offsetY;\n\n    // Pick a random coordinate inside the fireFrom rectangle if bigger than 1\n    const fromX =\n      this.fireFrom.width > 1\n        ? this.fireFrom.x + Math.random() * this.fireFrom.width\n        : this.fireFrom.x;\n    const fromY =\n      this.fireFrom.height > 1\n        ? this.fireFrom.y + Math.random() * this.fireFrom.height\n        : this.fireFrom.y;\n\n    let angle =\n      typeof this.trackedSprite?.angle === 'number' && this.trackRotation\n        ? this.trackedSprite.angle\n        : this.fireAngle;\n\n    //  The position (in world space) to fire the bullet towards, if set\n    if (typeof x === 'number' && typeof y === 'number') {\n      angle = Phaser.Math.RadToDeg(Math.atan2(y - fromY, x - fromX));\n    }\n\n    //  Apply +- angle variance\n    if (this.bulletAngleVariance !== 0) {\n      angle += Phaser.Math.Between(\n        -this.bulletAngleVariance,\n        this.bulletAngleVariance\n      );\n    }\n\n    let moveX = 0;\n    let moveY = 0;\n\n    //  Avoid unnecessary sin/cos for right-angled shots\n    if (angle === 0 || angle === 180) {\n      // Only cos needed\n      moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n    } else if (angle === 90 || angle === 270) {\n      // Only sin needed\n      moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n    } else {\n      // Need to calculate both\n      moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n      moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n    }\n\n    let bullet: Bullet | undefined;\n\n    // Attempt to get a bullet instance to use\n    if (this.autoExpandBulletsGroup) {\n      bullet = this.bullets.getFirstDead(\n        true,\n        fromX,\n        fromY,\n        this.bulletKey,\n        this.bulletFrame\n      );\n      bullet?.setData('bulletManager', this);\n    } else {\n      bullet = this.bullets.getFirstDead(false);\n    }\n\n    // Prepare and fire the bullet\n    if (bullet !== undefined) {\n      bullet.prepare(fromX, fromY);\n      bullet.setData({\n        fromX,\n        fromY,\n        killType: this.bulletKillType,\n        killDistance: this.bulletKillDistance,\n        rotateToVelocity: this.bulletRotateToVelocity,\n      });\n\n      // Prepare timer for bullet lifespan\n      if (this.bulletKillType === KillType.KILL_LIFESPAN) {\n        bullet.setData(\n          'timeEvent',\n          this.scene.time.addEvent({\n            delay: this.bulletLifespan,\n            callback: bullet.kill,\n            callbackScope: bullet,\n          })\n        );\n        bullet.lifespan = this.bulletLifespan;\n      }\n\n      bullet.angle = angle + this.bulletAngleOffset;\n\n      //  Frames and Animations\n      if (this.bulletAnimation) {\n        bullet.anims.play(this.bulletAnimation);\n      } else if (this.bulletFrameCycle) {\n        // Calculate bullet frame to use\n        if (this.bulletFrameIndex >= this.bulletFrames.length) {\n          this.bulletFrameIndex = 0;\n        }\n        bullet.setTexture(this.bulletKey, this.bulletFrameIndex);\n        this.bulletFrameIndex++;\n      } else if (this.bulletFrameRandom) {\n        // Pick a bullet frame at random\n        const nextFrame = Math.floor(Math.random() * this.bulletFrames.length);\n        bullet.setTexture(this.bulletKey, nextFrame);\n      }\n\n      // Set correct size and position for bullet body\n      if (bullet.getData('bodyDirty')) {\n        if (this._data.customBody) {\n          bullet.body.setSize(this._data.width, this._data.height);\n          bullet.body.setOffset(this._data.offsetX, this._data.offsetY);\n        }\n\n        bullet.body.collideWorldBounds = this.bulletCollideWorldBounds;\n\n        bullet.setData('bodyDirty', false);\n      }\n\n      bullet.body.setVelocity(moveX, moveY);\n      bullet.body.setGravity(this.bulletGravity.x, this.bulletGravity.y);\n\n      let next = 0;\n\n      // Calculate when to fire next bullet, taking into account speed variance\n      if (this.bulletSpeedVariance !== 0) {\n        let rate = this.fireRate;\n\n        rate += Phaser.Math.Between(\n          -this.fireRateVariance,\n          this.fireRateVariance\n        );\n\n        if (rate < 0) {\n          rate = 0;\n        }\n\n        next = this.scene.time.now + rate;\n      } else {\n        next = this.scene.time.now + this.fireRate;\n      }\n\n      // Prepare for next shot\n      if (this.multiFire) {\n        if (!this._hasFired) {\n          //  We only add 1 to the 'shots' count for multiFire shots\n          this._hasFired = true;\n          this._tempNextFire = next;\n          this.shots++;\n        }\n      } else {\n        this._nextFire = next;\n\n        this.shots++;\n      }\n\n      // Emit events\n      this.emit(WEAPON_FIRE, bullet, this, speed);\n\n      if (this.fireLimit > 0 && this.shots === this.fireLimit) {\n        this.emit(WEAPON_FIRE_LIMIT, this, this.fireLimit);\n      }\n    }\n\n    return bullet;\n  }\n\n  /**\n   * Set the fireFrom rectangle based on passed coords\n   * @private\n   * @param x - X coordinate for where to fire from\n   * @param y - Y coordinate for where to fire from\n   */\n  updateFireFrom(x: number, y: number): void {\n    if (this.fireFrom.width > 1) {\n      // If size is larger than 1, center on coordinates\n      Phaser.Geom.Rectangle.CenterOn(\n        this.fireFrom,\n        x + this.trackOffset.x,\n        y + this.trackOffset.y\n      );\n    } else {\n      this.fireFrom.x = x + this.trackOffset.x;\n      this.fireFrom.y = y + this.trackOffset.y;\n    }\n  }\n\n  /**\n   * You can modify the size of the physics Body the Bullets use to be any dimension you need.\n   * This allows you to make it smaller, or larger, than the parent Sprite.\n   * You can also control the x and y offset of the Body. This is the position of the\n   * Body relative to the top-left of the Sprite _texture_.\n   *\n   * For example: If you have a Sprite with a texture that is 80x100 in size,\n   * and you want the physics body to be 32x32 pixels in the middle of the texture, you would do:\n   *\n   * `setSize(32 / Math.abs(this.scale.x), 32 / Math.abs(this.scale.y), 24, 34)`\n   *\n   * Where the first two parameters are the new Body size (32x32 pixels) relative to the Sprite's scale.\n   * 24 is the horizontal offset of the Body from the top-left of the Sprites texture, and 34\n   * is the vertical offset.\n   *\n   * @param width - The width of the Body.\n   * @param height - The height of the Body.\n   * @param offsetX - The X offset of the Body from the top-left of the Sprites texture.\n   * @param offsetY - The Y offset of the Body from the top-left of the Sprites texture.\n   * @return This Weapon instance.\n   */\n  setBulletBodyOffset(\n    width: number,\n    height: number,\n    offsetX = 0,\n    offsetY = 0\n  ): this {\n    this._data.customBody = true;\n    this._data.width = width;\n    this._data.height = height;\n    this._data.offsetX = offsetX;\n    this._data.offsetY = offsetY;\n\n    //  Update all bullets in the pool\n    (this.bullets.children as Phaser.Structs.Set<Bullet>).each(child => {\n      child.body.setSize(width, height);\n      child.body.setOffset(offsetX, offsetY);\n      child.setData('bodyDirty', false);\n    });\n\n    return this;\n  }\n\n  /**\n   * Sets the texture frames that the bullets can use when being launched.\n   *\n   * This is intended for use when you've got numeric based frames, such as\n   * those loaded via a Sprite Sheet.\n   *\n   * It works by calling {@link https://photonstorm.github.io/phaser3-docs/Phaser.Utils.Array.html#.NumberArray Phaser.Utils.Array.NumberArray} internally, using\n   * the min and max values provided. Then it sets the frame index to be zero.\n   *\n   * You can optionally set the cycle and random booleans, to allow bullets to\n   * cycle through the frames when they're fired, or pick one at random.\n   *\n   * @param min - The minimum value the frame can be. Usually zero.\n   * @param max - The maximum value the frame can be.\n   * @param selectionMethod - Specifies how the\n   *  frame for the fired bullet will be selected. See {@link FrameType consts.FrameType}\n   *  for options.\n   * @return This Weapon instance.\n   */\n  setBulletFrames(\n    min: integer,\n    max: integer,\n    selectionMethod = FrameType.BULLET_FRAME_STABLE\n  ): this {\n    if (\n      typeof selectionMethod !== 'number' ||\n      selectionMethod < FrameType.BULLET_FRAME_STABLE ||\n      selectionMethod > FrameType.BULLET_FRAME_RANDOM\n    ) {\n      log(\n        `Invalid bullet frame selection method specified: ${selectionMethod}`,\n        this.logLevel\n      );\n    }\n\n    if (min > max) {\n      log(`min frame (${min}) must be <= max frame (${max})`, this.logLevel);\n    }\n\n    this.bulletFrames = Phaser.Utils.Array.NumberArray(min, max) as number[];\n    this.bulletFrameIndex = 0;\n    this.bulletFrameCycle = selectionMethod === FrameType.BULLET_FRAME_CYCLE;\n    this.bulletFrameRandom = selectionMethod === FrameType.BULLET_FRAME_RANDOM;\n\n    return this;\n  }\n\n  /**\n   * Adds a new animation under the given key. Optionally set the frames, frame rate and loop.\n   * The arguments are all the same as for {@link https://photonstorm.github.io/phaser3-docs/Phaser.Animations.AnimationManager.html#add AnimationManager.add}, and work in the same way.\n   *\n   * {@link bulletAnimation} will be set to this animation after it's created. From that point on, all\n   * bullets fired will play using this animation. You can swap between animations by calling this method\n   * several times, and then just changing the {@link bulletAnimation} property to the name of the animation\n   * you wish to play for the next launched bullet.\n   *\n   * If you wish to stop using animations at all, set {@link bulletAnimation} to '' (an empty string).\n   *\n   * @param name - The unique (within the Weapon instance) name for the animation, i.e. \"fire\", \"blast\".\n   * @param frames - An array of numbers/strings that correspond to the framesto add to this animation\n   * and in which order. e.g. [1, 2, 3] or ['run0', 'run1', run2]). If null then all frames will be used.\n   * @param frameRate - The speed at which the animation should play.\n   * The speed is given in frames per second.\n   * @param repeat - Number of times to repeat the animation. Set to -1 to repeat forever.\n   * @return This Weapon instance.\n   */\n  addBulletAnimation(\n    name: string,\n    frames?: Phaser.Types.Animations.AnimationFrame[],\n    frameRate = 60,\n    repeat = 0\n  ): this {\n    if (!this.scene.sys.anims.exists(name)) {\n      this.scene.sys.anims.create({\n        key: name,\n        frames,\n        frameRate,\n        repeat,\n      });\n\n      this.anims[name] = this.scene.sys.anims.get(name);\n    }\n\n    this.bulletAnimation = name;\n\n    return this;\n  }\n\n  /**\n   * Internal update method, called by the Weapon Plugin.\n   */\n  update(): void {\n    if (this._bulletKillType === KillType.KILL_WEAPON_BOUNDS) {\n      if (this.trackedSprite) {\n        Phaser.Geom.Rectangle.CenterOn(\n          this.bounds,\n          this.trackedSprite.x,\n          this.trackedSprite.y\n        );\n      } else if (this.trackedPointer) {\n        Phaser.Geom.Rectangle.CenterOn(\n          this.bounds,\n          this.trackedPointer.x,\n          this.trackedPointer.y\n        );\n      }\n    }\n\n    if (this.autofire) {\n      this.fire();\n    }\n  }\n\n  /**\n   * Internal update method, called by the Weapon Plugin.\n   */\n  postRender(): void {\n    if (!this.multiFire || !this._hasFired) {\n      return;\n    }\n\n    this._hasFired = false;\n\n    this._nextFire = this._tempNextFire;\n  }\n\n  /**\n   * Destroys this Weapon.\n   * You must release everything in here, all references, all objects, free it all up.\n   */\n  destroy(): void {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.scene = undefined;\n\n    this.bullets.destroy(true);\n  }\n}\n\nexport default Weapon;\n","import { KillType } from './consts';\nimport type { Weapon } from './main';\nimport { BULLET_KILL } from './events';\n\nlet bulletID = 0;\n\ntype BulletData = {\n  timeEvent?: Phaser.Time.TimerEvent;\n  bulletManager?: Weapon;\n  fromX: number;\n  fromY: number;\n  bodyDirty: boolean;\n  rotateToVelocity: boolean;\n  killType: KillType;\n  killDistance: number;\n  bodyBounds: Phaser.Geom.Rectangle;\n};\n\nclass Bullet extends Phaser.GameObjects.Sprite {\n  body!: Phaser.Physics.Arcade.Body;\n  bulletID: number;\n  lifespan?: number;\n\n  /**\n   * Create a new `Bullet` object. Bullets are used by the {@link Weapon} class, and are normal Sprites,\n   * with a few extra properties in the data manager to handle Weapon specific features.\n   *\n   * @param scene - A reference to the currently running scene.\n   * @param x - The x coordinate (in world space) to position the Bullet at.\n   * @param y - The y coordinate (in world space) to position the Bullet at.\n   * @param key - This is the image or texture used by the Particle during rendering.\n   * It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or {@link https://photonstorm.github.io/phaser3-docs/Phaser.Textures.Texture.html Texture}.\n   * @param frame - If this Bullet is using part of a sprite sheet or texture atlas\n   * you can specify the exact frame to use by giving a string or numeric index.\n   */\n  constructor(\n    scene: Phaser.Scene,\n    x: number,\n    y: number,\n    key: string,\n    frame: string | number\n  ) {\n    super(scene, x, y, key, frame);\n    this.bulletID = bulletID;\n    bulletID++;\n    this.scene.physics.add.existing(this);\n\n    this.setDataEnabled();\n\n    this.setData({\n      timeEvent: undefined,\n      bulletManager: undefined,\n      fromX: 0,\n      fromY: 0,\n      bodyDirty: true,\n      rotateToVelocity: false,\n      killType: KillType.KILL_NEVER,\n      killDistance: 0,\n      bodyBounds: new Phaser.Geom.Rectangle(),\n    });\n  }\n\n  /* eslint-disable no-unused-vars */\n\n  setData(key: Partial<BulletData>, data?: never): this;\n  setData(key: 'timeEvent', data: BulletData['timeEvent']): this;\n  setData(key: 'bulletManager', data: BulletData['bulletManager']): this;\n  setData(key: 'fromX', data: BulletData['fromX']): this;\n  setData(key: 'fromY', data: BulletData['fromY']): this;\n  setData(key: 'bodyDirty', data: BulletData['bodyDirty']): this;\n  setData(key: 'rotateToVelocity', data: BulletData['rotateToVelocity']): this;\n  setData(key: 'killType', data: BulletData['killType']): this;\n  setData(key: 'killDistance', data: BulletData['killDistance']): this;\n  setData(key: 'bodyBounds', data: BulletData['bodyBounds']): this;\n  setData(\n    key: string | Partial<BulletData>,\n    data?:\n      | boolean\n      | number\n      | Phaser.Time.TimerEvent\n      | Weapon\n      | Phaser.Geom.Rectangle\n      | undefined\n  ): this {\n    return super.setData(key, data);\n  }\n\n  getData(key: 'timeEvent'): BulletData['timeEvent'];\n  getData(key: 'bulletManager'): BulletData['bulletManager'];\n  getData(key: 'fromX'): BulletData['fromX'];\n  getData(key: 'fromY'): BulletData['fromY'];\n  getData(key: 'bodyDirty'): BulletData['bodyDirty'];\n  getData(key: 'rotateToVelocity'): BulletData['rotateToVelocity'];\n  getData(key: 'killType'): BulletData['killType'];\n  getData(key: 'killDistance'): BulletData['killDistance'];\n  getData(key: 'bodyBounds'): BulletData['bodyBounds'];\n  getData(\n    key: string\n  ):\n    | boolean\n    | number\n    | Phaser.Time.TimerEvent\n    | Weapon\n    | Phaser.Geom.Rectangle\n    | undefined {\n    return super.getData(key);\n  }\n\n  /* eslint-enable no-unused-vars */\n\n  /**\n   * Prepares this bullet to be fired and to interact with the rest\n   * of the scene again.\n   * @param x - Resets bullet position to this x coordinate\n   * @param y - Resets bullet position to this y coordinate\n   */\n  prepare(x: number, y: number): void {\n    this.setActive(true);\n    this.setVisible(true);\n    this.body.enable = true;\n    this.body.reset(x, y);\n\n    const debugPhysics = this.getData('bulletManager')?.debugPhysics || false;\n    this.body.debugShowBody = debugPhysics;\n    this.body.debugShowVelocity = debugPhysics;\n  }\n\n  /**\n   * Kills the Bullet, freeing it up for re-use by the Weapon bullet pool.\n   * Also dispatches the {@link BULLET_KILL} event on the {@link Weapon}.\n   * @returns This instance of the bullet class\n   */\n  kill(): this {\n    // Reproduce Phaser.Physics.Arcade.Components.Enable.disableBody because\n    // we can't assume that the bullet class has it built in.\n    this.body.stop();\n    this.body.enable = false;\n    this.setActive(false);\n    this.setVisible(false);\n    this.body.debugShowBody = false;\n    this.body.debugShowVelocity = false;\n\n    // TODO: potentially we don't need to destroy the time event and we can\n    // just pause when the bullet is killed and restart it when it's refired.\n    // For now though do the simple thing and discard it.\n    // Another option would be to use Date.now() and manually process pause\n    // events with a flag and some math.\n    // Both of those are probably premature optimizations.\n    const timeEvent = this.getData('timeEvent');\n    if (timeEvent !== undefined) {\n      timeEvent.destroy();\n      this.setData('timeEvent', undefined);\n    }\n\n    this.getData('bulletManager')?.emit(\n      BULLET_KILL,\n      this,\n      this.getData('bulletManager')\n    );\n\n    return this;\n  }\n\n  /**\n   * Updates the Bullet, killing as required.\n   */\n  update(): void {\n    if (!this.active) {\n      // this was previously a check to this.exists\n      return;\n    }\n\n    const bulletManager = this.getData('bulletManager') as Weapon;\n\n    if (this.getData('killType') > KillType.KILL_LIFESPAN) {\n      if (this.getData('killType') === KillType.KILL_DISTANCE) {\n        if (\n          new Phaser.Math.Vector2(\n            this.getData('fromX'),\n            this.getData('fromY')\n          ).distance((this as unknown) as Phaser.Math.Vector2) >\n          this.getData('killDistance')\n        ) {\n          this.kill();\n        }\n      } else if (\n        !Phaser.Geom.Intersects.RectangleToRectangle(\n          bulletManager.bulletBounds,\n          this.body.getBounds(\n            this.getData('bodyBounds')\n          ) as Phaser.Geom.Rectangle\n        )\n      ) {\n        this.kill();\n      }\n    }\n\n    if (this.getData('rotateToVelocity')) {\n      this.rotation = Math.atan2(this.body.velocity.y, this.body.velocity.x);\n    }\n\n    if (bulletManager.bulletWorldWrap) {\n      this.scene.physics.world.wrap(this, bulletManager.bulletWorldWrapPadding);\n    }\n  }\n}\n\nexport default Bullet;\n","/* eslint-disable no-unused-vars */\n/**\n * Kill type constants for {@link Weapon.bulletKillType}\n */\nenum KillType {\n  /**\n   * A {@link Weapon.bulletKillType bulletKillType} constant that stops the bullets from ever being destroyed automatically.\n   */\n  KILL_NEVER = 0,\n\n  /**\n   * A {@link Weapon.bulletKillType bulletKillType} constant that automatically kills the bullets\n   * when their {@link Weapon.bulletLifespan} expires.\n   */\n  KILL_LIFESPAN = 1,\n\n  /**\n   * A {@link Weapon.bulletKillType bulletKillType} constant that automatically kills the bullets after they\n   * exceed the {@link Weapon.bulletKillDistance} from their original firing position.\n   */\n  KILL_DISTANCE = 2,\n\n  /**\n   * A {@link Weapon.bulletKillType bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link Weapon.bounds} rectangle.\n   */\n  KILL_WEAPON_BOUNDS = 3,\n\n  /**\n   * A {@link Weapon.bulletKillType bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link https://photonstorm.github.io/phaser3-docs/Phaser.Cameras.Scene2D.Camera.html#getBounds Camera.getBounds} rectangle.\n   */\n  KILL_CAMERA_BOUNDS = 4,\n\n  /**\n   * A {@link Weapon.bulletKillType bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.World.html#bounds World.bounds} rectangle.\n   */\n  KILL_WORLD_BOUNDS = 5,\n\n  /**\n   * A {@link Weapon.bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link Weapon.bounds} rectangle.\n   * The difference between static bounds and weapon bounds, is that a static bounds will never be adjusted to\n   * match the position of a tracked sprite or pointer.\n   */\n  KILL_STATIC_BOUNDS = 6,\n}\n\nexport { KillType };\n\n/**\n * Angle constants that can be used anywhere you specify angles in degrees, for instance {@link Weapon.fireAngle} and {@link Weapon.bulletAngleOffset}.\n */\nenum Angle {\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face up.\n   */\n  ANGLE_UP = 270,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face down.\n   */\n  ANGLE_DOWN = 90,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face left.\n   */\n  ANGLE_LEFT = 180,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face right.\n   */\n  ANGLE_RIGHT = 0,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north east.\n   */\n  ANGLE_NORTH_EAST = 315,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north west.\n   */\n  ANGLE_NORTH_WEST = 225,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south east.\n   */\n  ANGLE_SOUTH_EAST = 45,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south west.\n   */\n  ANGLE_SOUTH_WEST = 135,\n}\n\nexport { Angle };\n\n/**\n * Bullet frame type constants for {@link Weapon.setBulletFrames}\n */\nenum FrameType {\n  /**\n   * When selecting a bullet frame the same frame should always be used. This\n   * is the default value.\n   */\n  BULLET_FRAME_STABLE = 0,\n\n  /**\n   * When selecting a bullet frame the next frame should be used\n   */\n  BULLET_FRAME_CYCLE = 1,\n\n  /**\n   * When selecting a bullet frame a random frame should be used.\n   */\n  BULLET_FRAME_RANDOM = 2,\n}\n\nexport { FrameType };\n\nexport default {\n  KillType,\n  Angle,\n  FrameType,\n};\n","/**\n * This event is dispatched when a weapon is fired.\n *\n * @event WEAPON_FIRE\n *\n * @param {Bullet} bullet - The bullet that was fired\n * @param {Weapon} weapon - The weapon emitting the event\n * @param {number} speed - The speed of the bullet\n */\nexport const WEAPON_FIRE = 'fire';\n\n/**\n * This event is dispatched when the weapon's fire limit is reached.\n *\n * @event WEAPON_FIRE_LIMIT\n *\n * @param {Weapon} weapon - The weapon emitting the event\n * @param {number} fireLimist - The fire limit\n */\nexport const WEAPON_FIRE_LIMIT = 'firelimit';\n\n/**\n * This event is dispatched when a bullet is killed.\n *\n * @event BULLET_KILL\n *\n * @param {Bullet} bullet - The bullet that was killed\n * @param {Weapon} weapon - The weapon emitting the event\n */\nexport const BULLET_KILL = 'kill';\n\nexport default {\n  WEAPON_FIRE,\n  WEAPON_FIRE_LIMIT,\n  BULLET_KILL,\n};\n","import consts from './consts';\nimport type Weapon from './Weapon';\n\n/**\n * Log text to the console or throw an error\n * @param text - Text to be logged\n * @param logLevel - The log level, either `warn`, `error' or `off`\n */\nfunction log(text: string, logLevel: 'warn' | 'error' | 'off'): void {\n  if (logLevel === 'warn') {\n    /* eslint-disable-next-line no-console */\n    console.warn(text);\n  } else if (logLevel === 'error') {\n    throw new Error(text);\n  }\n}\n\n/**\n * Check the config of the weapon for common errors and weird configurations.\n * @param weapon - The weapon being validated\n * @param property - The property of the weapon being validated\n */\nfunction validateConfig(\n  weapon: Weapon,\n  property: keyof Weapon | 'all' = 'all'\n): void {\n  if (\n    (['bulletWorldWrap', 'bulletKillType'].includes(property) ||\n      property === 'all') &&\n    weapon.bulletWorldWrap &&\n    (weapon.bulletKillType === consts.KillType.KILL_WORLD_BOUNDS ||\n      weapon.bulletKillType === consts.KillType.KILL_WEAPON_BOUNDS)\n  ) {\n    log(\n      'Warning: KILL_WORLD_BOUNDS and KILL_WEAPON_BOUNDS does not work well with bulletWorldWrap set to true.',\n      weapon.logLevel\n    );\n  }\n  if (\n    (['bulletKillType', 'bulletLifespan'].includes(property) ||\n      property === 'all') &&\n    weapon.bulletKillType === consts.KillType.KILL_LIFESPAN &&\n    weapon.bulletLifespan < 0\n  ) {\n    log(\n      'Invalid bulletLifespan; must be > 0; currently ' + weapon.bulletLifespan,\n      weapon.logLevel\n    );\n  }\n  if (\n    (['trackRotation', 'trackedSprite'].includes(property) ||\n      property === 'all') &&\n    weapon.trackRotation === true &&\n    (weapon.trackedSprite?.rotation === undefined ||\n      weapon.trackedSprite.angle === undefined)\n  ) {\n    log(\n      'Warning: Weapon cannot track rotation of an object without a rotation and/or angle property.',\n      weapon.logLevel\n    );\n  }\n  if (\n    (['bulletInheritSpriteSpeed', 'trackedSprite'].includes(property) ||\n      property === 'all') &&\n    weapon.bulletInheritSpriteSpeed === true &&\n    !weapon.trackedSprite?.body\n  ) {\n    log(\n      'Warning: Bullet cannot inherit speed from a sprite without a body.',\n      weapon.logLevel\n    );\n  }\n  const shouldBePositive: (keyof Weapon)[] = [\n    'fireLimit',\n    'fireRate',\n    'fireRateVariance',\n    'bulletAngleVariance',\n    'bulletSpeedVariance',\n    'bulletKillDistance',\n  ];\n  /* eslint-disable @typescript-eslint/no-non-null-assertion */\n  if (property === 'all') {\n    shouldBePositive.forEach(key => {\n      if (weapon[key] !== undefined && weapon[key]! < 0) {\n        log(\n          'Invalid ' + property + '; must be >= 0; currently ' + weapon[key],\n          weapon.logLevel\n        );\n      }\n    });\n  } else if (\n    shouldBePositive.includes(property) &&\n    weapon[property] !== undefined &&\n    weapon[property]! < 0\n  ) {\n    log(\n      'Invalid ' + property + '; must be >= 0; currently ' + weapon[property],\n      weapon.logLevel\n    );\n  }\n}\n\nexport { log };\nexport default validateConfig;\n","/**\n * @author       Patrick Sletvold\n * @author       jdotr <https://github.com/jdotrjs>\n * @author       Richard Davey\n * @license      {@link https://github.com/16patsle/phaser3-weapon-plugin/blob/master/LICENSE|MIT License}\n */\nimport Weapon from './Weapon';\n\ntype WeaponConfig = {\n  /**\n   * The quantity of bullets to seed the Weapon with. If -1 it will set the pool to automatically expand.\n   */\n  bulletLimit?: number;\n\n  /**\n   * The Game.cache key of the image that this Sprite will use.\n   */\n  key?: string;\n\n  /**\n   * If the Sprite image contains multiple frames you can specify which one to use here.\n   */\n  frame?: string;\n\n  /**\n   * Optional Group to add the object to. If not specified it will be added to the World group.\n   */\n  group?: Phaser.GameObjects.Group;\n\n  /**\n   * Optional custom class for the Weapon.\n   */\n  weaponClass?: typeof Weapon;\n};\n\n/**\n * The Weapon Plugin provides the ability to easily create a bullet pool\n * and manager.\n *\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\n * not currently work with Impact or Matter Physics.\n *\n * The Bullets are created inside of {@link Weapon.bullets weapon.bullets}, which is\n * a {@link https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Group.html Group} instance. Anything you can usually do\n * with a Group, like iterate it, etc can be done to the bullets Group too.\n *\n * Bullets can have textures and even animations. You can control the speed at\n * which they are fired, the firing rate, the firing angle, and even set things\n * like gravity for them.\n *\n * A small example, using add.weapon, assumed to be running from within a\n * {@link https://photonstorm.github.io/phaser3-docs/Phaser.Types.Scenes.html#.SceneCreateCallback Phaser.Scene.create} method:\n *\n * ```javascript\n * var weapon = this.add.weapon(10, 'bullet');\n * weapon.fireFrom.setPosition(300, 300);\n * this.input.on(Phaser.Input.Events.POINTER_DOWN, weapon.fire, this);\n * ```\n */\nclass WeaponPlugin extends Phaser.Plugins.ScenePlugin {\n  weapons: Weapon[];\n\n  /**\n   * @param scene - A reference to the {@link https://photonstorm.github.io/phaser3-docs/Phaser.Scene.html Phaser.Scene} instance.\n   * @param pluginManager - A reference to the\n   *  {@link https://photonstorm.github.io/phaser3-docs/Phaser.Plugins.PluginManager.html PluginManager} instance.\n   */\n  constructor(\n    scene: Phaser.Scene,\n    pluginManager: Phaser.Plugins.PluginManager\n  ) {\n    super(scene, pluginManager);\n\n    this.weapons = [];\n\n    // Register our new Game Object type\n    pluginManager.registerGameObject(\n      'weapon',\n      this.add.bind(this),\n      (config: WeaponConfig) => {\n        return this.add(\n          config.bulletLimit,\n          config.key,\n          config.frame,\n          config.group,\n          config.weaponClass\n        );\n      }\n    );\n  }\n\n  /**\n   *\n   * @param bulletLimit - The quantity of bullets to seed the Weapon with. If -1 it will set the pool to automatically expand.\n   * @param key - The Game.cache key of the image that this Sprite will use.\n   * @param frame - If the Sprite image contains multiple frames you can specify which one to use here.\n   * @param group - Optional Group to add the object to.\n   * @param weaponClass - Optional custom class for the Weapon.\n   * @returns The weapon that was created\n   */\n  add(\n    bulletLimit?: number,\n    key?: string,\n    frame?: string,\n    group?: Phaser.GameObjects.Group,\n    weaponClass: typeof Weapon = Weapon\n  ): Weapon {\n    const weapon = new weaponClass(this.scene, bulletLimit, key, frame, group);\n\n    this.weapons.push(weapon);\n\n    return weapon;\n  }\n\n  /**\n   * Called by the PluginManager when this plugin is started.\n   * If a plugin is stopped, and then started again, this will get called again.\n   * Typically called immediately after `BasePlugin.init`.\n   */\n  start(): void {\n    this.systems.events.on(\n      Phaser.Core.Events.POST_RENDER,\n      this.postRender,\n      this\n    );\n  }\n\n  /**\n   * If this is a Scene Plugin (i.e. installed into a Scene) then this method is called when the Scene boots.\n   * By this point the plugin properties `scene` and `systems` will have already been set.\n   * In here you can listen for Scene events and set-up whatever you need for this plugin to run.\n   */\n  boot(): void {\n    const eventEmitter = this.systems.events;\n\n    eventEmitter.on(Phaser.Scenes.Events.UPDATE, this.update, this);\n    eventEmitter.on(Phaser.Core.Events.DESTROY, this.destroy, this);\n  }\n\n  /**\n   * Internal update method, called by the PluginManager.\n   */\n  protected update(): void {\n    this.weapons.forEach(weapon => {\n      weapon.update();\n    });\n  }\n\n  /**\n   * Internal update method, called by the PluginManager.\n   */\n  protected postRender(): void {\n    this.weapons.forEach(weapon => {\n      weapon.postRender();\n    });\n  }\n\n  /**\n   * Destroys this Weapon.\n   * You must release everything in here, all references, all objects, free it all up.\n   */\n  destroy(): void {\n    super.destroy();\n\n    this.weapons.forEach(weapon => {\n      weapon.destroy();\n    });\n  }\n}\n\nexport default WeaponPlugin;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(0);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}